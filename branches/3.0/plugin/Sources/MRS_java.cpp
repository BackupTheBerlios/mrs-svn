/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.27
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/***********************************************************************
 *
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 *
 ************************************************************************/

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
#  if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#    define SWIGTEMPLATEDISAMBIGUATOR template
#  else
#    define SWIGTEMPLATEDISAMBIGUATOR 
#  endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__) || defined(__ICC)
#   define SWIGUNUSED __attribute__ ((unused)) 
# else
#   define SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods for Windows DLLs */
#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   define SWIGEXPORT
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTELC__)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <string>


#include <vector>
#include <iostream>
using namespace std;

class MDatabank;
typedef std::vector<MDatabank*> MDatabankArray;


#include "MRSInterface.h"


#ifdef __cplusplus
extern "C" {
#endif

JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_gErrStr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    std::string *arg1 = (std::string *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::string **)(void *)&jarg1; 
    gErrStr = *arg1;
    
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_gErrStr_1get(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    result = (std::string *)&gErrStr;
    
    *(std::string **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_errstr(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = errstr();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_DUST(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jstring jresult = 0 ;
    std::string *arg1 = 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    if(!jarg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
    if (!arg1_pstr) return 0;
    std::string arg1_str(arg1_pstr);
    arg1 = &arg1_str;
    jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
    {
        try {
            result = DUST((std::string const &)*arg1);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_SEG(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jstring jresult = 0 ;
    std::string *arg1 = 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    if(!jarg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
    if (!arg1_pstr) return 0;
    std::string arg1_str(arg1_pstr);
    arg1 = &arg1_str;
    jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
    {
        try {
            result = SEG((std::string const &)*arg1);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_VERBOSE_1set(JNIEnv *jenv, jclass jcls, jint jarg1) {
    int arg1 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = (int)jarg1; 
    {
        try {
            VERBOSE = arg1;
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT jint JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_VERBOSE_1get(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)VERBOSE;
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_THREADS_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    unsigned int arg1 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = (unsigned int)jarg1; 
    {
        try {
            THREADS = arg1;
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_THREADS_1get(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    unsigned int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (unsigned int)THREADS;
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_COMPRESSION_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    char *arg1 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    {
        arg1 = 0;
        if (jarg1) {
            arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
            if (!arg1) return ;
        }
    }
    {
        try {
            {
                if (arg1) {
                    COMPRESSION = (char const *) (new char[strlen(arg1)+1]);
                    strcpy((char *) COMPRESSION,arg1);
                } else {
                    COMPRESSION = 0;
                }
            }
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
    {
        if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1); 
    }
}


JNIEXPORT jstring JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_COMPRESSION_1get(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (char *)COMPRESSION;
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_COMPRESSION_1LEVEL_1set(JNIEnv *jenv, jclass jcls, jint jarg1) {
    int arg1 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = (int)jarg1; 
    {
        try {
            COMPRESSION_LEVEL = arg1;
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT jint JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_COMPRESSION_1LEVEL_1get(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)COMPRESSION_LEVEL;
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_WEIGHT_1BIT_1COUNT_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    unsigned int arg1 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = (unsigned int)jarg1; 
    {
        try {
            WEIGHT_BIT_COUNT = arg1;
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_WEIGHT_1BIT_1COUNT_1get(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    unsigned int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (unsigned int)WEIGHT_BIT_COUNT;
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_COMPRESSION_1DICTIONARY_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    char *arg1 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    {
        arg1 = 0;
        if (jarg1) {
            arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
            if (!arg1) return ;
        }
    }
    {
        try {
            {
                if (arg1) {
                    COMPRESSION_DICTIONARY = (char const *) (new char[strlen(arg1)+1]);
                    strcpy((char *) COMPRESSION_DICTIONARY,arg1);
                } else {
                    COMPRESSION_DICTIONARY = 0;
                }
            }
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
    {
        if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1); 
    }
}


JNIEXPORT jstring JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_COMPRESSION_1DICTIONARY_1get(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (char *)COMPRESSION_DICTIONARY;
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_new_1MStringIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    std::vector<std::string > *arg1 = 0 ;
    MStringIterator *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::vector<std::string > **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null");
        return 0;
    } 
    {
        try {
            result = (MStringIterator *)new MStringIterator(*arg1);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MStringIterator **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MStringIterator_1Next(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    MStringIterator *arg1 = (MStringIterator *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MStringIterator **)(void *)&jarg1; 
    {
        try {
            result = (char *)(arg1)->Next();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_delete_1MStringIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    MStringIterator *arg1 = (MStringIterator *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MStringIterator **)(void *)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT jstring JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1kWildCardString_1get(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (char *)(char *)MDatabank::kWildCardString;
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_new_1MDatabank(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    MDatabank *result;
    
    (void)jenv;
    (void)jcls;
    if(!jarg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
    if (!arg1_pstr) return 0;
    std::string arg1_str(arg1_pstr);
    arg1 = &arg1_str;
    jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
    {
        try {
            result = (MDatabank *)new MDatabank((std::string const &)*arg1);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MDatabank **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1Create(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    MDatabank *result;
    
    (void)jenv;
    (void)jcls;
    if(!jarg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
    if (!arg1_pstr) return 0;
    std::string arg1_str(arg1_pstr);
    arg1 = &arg1_str;
    jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
    {
        try {
            result = (MDatabank *)MDatabank::Create((std::string const &)*arg1);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MDatabank **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1Merge(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jboolean jarg3) {
    std::string *arg1 = 0 ;
    SwigValueWrapper<std::vector<MDatabank * > > arg2 ;
    bool arg3 ;
    jint size2 ;
    
    (void)jenv;
    (void)jcls;
    if(!jarg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
    if (!arg1_pstr) return ;
    std::string arg1_str(arg1_pstr);
    arg1 = &arg1_str;
    jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
    {
        MDatabankArray a;
        
        _jobjectArray* aa = (_jobjectArray*)(jarg2);
        
        size2 = jenv->GetArrayLength(aa);
        
        /* make a copy of each string */
        for (int i = 0; i < size2; ++i)
        {
            MDatabank* obj = (MDatabank*)jenv->GetObjectArrayElement(aa, i);
            a.push_back(obj);
        }
        
        arg2 = a;
    }
    arg3 = jarg3 ? true : false; 
    {
        try {
            MDatabank::Merge((std::string const &)*arg1,arg2,arg3);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT jint JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1Count(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    MDatabank *arg1 = (MDatabank *) 0 ;
    long result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    {
        try {
            result = (long)(arg1)->Count();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1GetVersion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    MDatabank *arg1 = (MDatabank *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    {
        try {
            result = (arg1)->GetVersion();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1GetUUID(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    MDatabank *arg1 = (MDatabank *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    {
        try {
            result = (arg1)->GetUUID();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1DumpInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    MDatabank *arg1 = (MDatabank *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    {
        try {
            (arg1)->DumpInfo();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1DumpIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    MDatabank *arg1 = (MDatabank *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return ;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    {
        try {
            (arg1)->DumpIndex((std::string const &)*arg2);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1PrefetchDocWeights(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    MDatabank *arg1 = (MDatabank *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return ;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    {
        try {
            (arg1)->PrefetchDocWeights((std::string const &)*arg2);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT jint JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1CountForKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
    jint jresult = 0 ;
    MDatabank *arg1 = (MDatabank *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    long result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return 0;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    if(!jarg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
    if (!arg3_pstr) return 0;
    std::string arg3_str(arg3_pstr);
    arg3 = &arg3_str;
    jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
    {
        try {
            result = (long)((MDatabank const *)arg1)->CountForKey((std::string const &)*arg2,(std::string const &)*arg3);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1Find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jboolean jarg3) {
    jlong jresult = 0 ;
    MDatabank *arg1 = (MDatabank *) 0 ;
    std::string *arg2 = 0 ;
    bool arg3 ;
    MQueryResults *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return 0;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    arg3 = jarg3 ? true : false; 
    {
        try {
            result = (MQueryResults *)(arg1)->Find((std::string const &)*arg2,arg3);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MQueryResults **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1Find_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    MDatabank *arg1 = (MDatabank *) 0 ;
    std::string *arg2 = 0 ;
    MQueryResults *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return 0;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    {
        try {
            result = (MQueryResults *)(arg1)->Find((std::string const &)*arg2);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MQueryResults **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1Match_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
    jlong jresult = 0 ;
    MDatabank *arg1 = (MDatabank *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    MBooleanQuery *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return 0;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    if(!jarg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
    if (!arg3_pstr) return 0;
    std::string arg3_str(arg3_pstr);
    arg3 = &arg3_str;
    jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
    {
        try {
            result = (MBooleanQuery *)(arg1)->Match((std::string const &)*arg2,(std::string const &)*arg3);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MBooleanQuery **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1Match_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    MDatabank *arg1 = (MDatabank *) 0 ;
    std::string *arg2 = 0 ;
    MBooleanQuery *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return 0;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    {
        try {
            result = (MBooleanQuery *)(arg1)->Match((std::string const &)*arg2);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MBooleanQuery **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1MatchRel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jstring jarg4) {
    jlong jresult = 0 ;
    MDatabank *arg1 = (MDatabank *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    MBooleanQuery *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return 0;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    if(!jarg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
    if (!arg3_pstr) return 0;
    std::string arg3_str(arg3_pstr);
    arg3 = &arg3_str;
    jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
    if(!jarg4) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
    if (!arg4_pstr) return 0;
    std::string arg4_str(arg4_pstr);
    arg4 = &arg4_str;
    jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
    {
        try {
            result = (MBooleanQuery *)(arg1)->MatchRel((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MBooleanQuery **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1MatchRel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
    jlong jresult = 0 ;
    MDatabank *arg1 = (MDatabank *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    MBooleanQuery *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return 0;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    if(!jarg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
    if (!arg3_pstr) return 0;
    std::string arg3_str(arg3_pstr);
    arg3 = &arg3_str;
    jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
    {
        try {
            result = (MBooleanQuery *)(arg1)->MatchRel((std::string const &)*arg2,(std::string const &)*arg3);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MBooleanQuery **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1BooleanQuery(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    MDatabank *arg1 = (MDatabank *) 0 ;
    std::string *arg2 = 0 ;
    MBooleanQuery *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return 0;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    {
        try {
            result = (MBooleanQuery *)(arg1)->BooleanQuery((std::string const &)*arg2);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MBooleanQuery **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1RankedQuery(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    MDatabank *arg1 = (MDatabank *) 0 ;
    std::string *arg2 = 0 ;
    MRankedQuery *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return 0;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    {
        try {
            result = (MRankedQuery *)(arg1)->RankedQuery((std::string const &)*arg2);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MRankedQuery **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1Get(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jstring jresult = 0 ;
    MDatabank *arg1 = (MDatabank *) 0 ;
    std::string *arg2 = 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return 0;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    {
        try {
            result = (char *)(arg1)->Get((std::string const &)*arg2);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1Sequence_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
    jstring jresult = 0 ;
    MDatabank *arg1 = (MDatabank *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return 0;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    arg3 = (unsigned long)jarg3; 
    {
        try {
            result = (char *)(arg1)->Sequence((std::string const &)*arg2,arg3);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1Sequence_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jstring jresult = 0 ;
    MDatabank *arg1 = (MDatabank *) 0 ;
    std::string *arg2 = 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return 0;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    {
        try {
            result = (char *)(arg1)->Sequence((std::string const &)*arg2);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1Blast(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jlong jarg4, jdouble jarg5, jboolean jarg6, jboolean jarg7, jlong jarg8, jlong jarg9) {
    jlong jresult = 0 ;
    MDatabank *arg1 = (MDatabank *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    unsigned long arg4 ;
    double arg5 ;
    bool arg6 ;
    bool arg7 ;
    unsigned long arg8 ;
    unsigned long arg9 ;
    MBlastHits *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return 0;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    if(!jarg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
    if (!arg3_pstr) return 0;
    std::string arg3_str(arg3_pstr);
    arg3 = &arg3_str;
    jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
    arg4 = (unsigned long)jarg4; 
    arg5 = (double)jarg5; 
    arg6 = jarg6 ? true : false; 
    arg7 = jarg7 ? true : false; 
    arg8 = (unsigned long)jarg8; 
    arg9 = (unsigned long)jarg9; 
    {
        try {
            result = (MBlastHits *)(arg1)->Blast((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MBlastHits **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1Index(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    MDatabank *arg1 = (MDatabank *) 0 ;
    std::string *arg2 = 0 ;
    MIndex *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return 0;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    {
        try {
            result = (MIndex *)(arg1)->Index((std::string const &)*arg2);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MIndex **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1Indices(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    MDatabank *arg1 = (MDatabank *) 0 ;
    MIndices *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    {
        try {
            result = (MIndices *)(arg1)->Indices();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MIndices **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1SuggestCorrection(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    MDatabank *arg1 = (MDatabank *) 0 ;
    std::string *arg2 = 0 ;
    MStringIterator *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return 0;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    {
        try {
            result = (MStringIterator *)(arg1)->SuggestCorrection((std::string const &)*arg2);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MStringIterator **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1SetStopWords(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    MDatabank *arg1 = (MDatabank *) 0 ;
    SwigValueWrapper<std::vector<std::string > > arg2 ;
    MStringArray *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    argp2 = *(MStringArray **)(void *)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null MStringArray");
        return ;
    }
    arg2 = *argp2; 
    {
        try {
            (arg1)->SetStopWords(arg2);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1Store(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    MDatabank *arg1 = (MDatabank *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return ;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    {
        try {
            (arg1)->Store((std::string const &)*arg2);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1IndexText(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
    MDatabank *arg1 = (MDatabank *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return ;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    if(!jarg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
    if (!arg3_pstr) return ;
    std::string arg3_str(arg3_pstr);
    arg3 = &arg3_str;
    jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
    {
        try {
            (arg1)->IndexText((std::string const &)*arg2,(std::string const &)*arg3);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1IndexTextAndNumbers(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
    MDatabank *arg1 = (MDatabank *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return ;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    if(!jarg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
    if (!arg3_pstr) return ;
    std::string arg3_str(arg3_pstr);
    arg3 = &arg3_str;
    jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
    {
        try {
            (arg1)->IndexTextAndNumbers((std::string const &)*arg2,(std::string const &)*arg3);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1IndexWord(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
    MDatabank *arg1 = (MDatabank *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return ;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    if(!jarg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
    if (!arg3_pstr) return ;
    std::string arg3_str(arg3_pstr);
    arg3 = &arg3_str;
    jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
    {
        try {
            (arg1)->IndexWord((std::string const &)*arg2,(std::string const &)*arg3);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1IndexValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
    MDatabank *arg1 = (MDatabank *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return ;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    if(!jarg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
    if (!arg3_pstr) return ;
    std::string arg3_str(arg3_pstr);
    arg3 = &arg3_str;
    jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
    {
        try {
            (arg1)->IndexValue((std::string const &)*arg2,(std::string const &)*arg3);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1IndexWordWithWeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jlong jarg4) {
    MDatabank *arg1 = (MDatabank *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    unsigned long arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return ;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    if(!jarg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
    if (!arg3_pstr) return ;
    std::string arg3_str(arg3_pstr);
    arg3 = &arg3_str;
    jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
    arg4 = (unsigned long)jarg4; 
    {
        try {
            (arg1)->IndexWordWithWeight((std::string const &)*arg2,(std::string const &)*arg3,arg4);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1IndexDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
    MDatabank *arg1 = (MDatabank *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return ;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    if(!jarg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
    if (!arg3_pstr) return ;
    std::string arg3_str(arg3_pstr);
    arg3 = &arg3_str;
    jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
    {
        try {
            (arg1)->IndexDate((std::string const &)*arg2,(std::string const &)*arg3);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1IndexNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
    MDatabank *arg1 = (MDatabank *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return ;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    if(!jarg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
    if (!arg3_pstr) return ;
    std::string arg3_str(arg3_pstr);
    arg3 = &arg3_str;
    jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
    {
        try {
            (arg1)->IndexNumber((std::string const &)*arg2,(std::string const &)*arg3);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1AddSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    MDatabank *arg1 = (MDatabank *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return ;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    {
        try {
            (arg1)->AddSequence((std::string const &)*arg2);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1FlushDocument(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    MDatabank *arg1 = (MDatabank *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    {
        try {
            (arg1)->FlushDocument();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1SetVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    MDatabank *arg1 = (MDatabank *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return ;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    {
        try {
            (arg1)->SetVersion((std::string const &)*arg2);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1Finish_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    MDatabank *arg1 = (MDatabank *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    arg2 = jarg2 ? true : false; 
    {
        try {
            (arg1)->Finish(arg2);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1Finish_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    MDatabank *arg1 = (MDatabank *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    {
        try {
            (arg1)->Finish();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MDatabank_1CreateDictionary(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jint jarg4) {
    MDatabank *arg1 = (MDatabank *) 0 ;
    std::string arg2 ;
    long arg3 ;
    long arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    } 
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return ;
    arg2 =  std::string(arg2_pstr);
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    arg3 = (long)jarg3; 
    arg4 = (long)jarg4; 
    {
        try {
            (arg1)->CreateDictionary(arg2,arg3,arg4);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_delete_1MDatabank(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    MDatabank *arg1 = (MDatabank *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MDatabank **)(void *)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MBooleanQuery_1Not(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    MBooleanQuery *arg1 = (MBooleanQuery *) 0 ;
    MBooleanQuery *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MBooleanQuery **)(void *)&jarg1; 
    {
        try {
            result = (MBooleanQuery *)MBooleanQuery::Not(arg1);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MBooleanQuery **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MBooleanQuery_1Union(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    MBooleanQuery *arg1 = (MBooleanQuery *) 0 ;
    MBooleanQuery *arg2 = (MBooleanQuery *) 0 ;
    MBooleanQuery *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MBooleanQuery **)(void *)&jarg1; 
    arg2 = *(MBooleanQuery **)(void *)&jarg2; 
    {
        try {
            result = (MBooleanQuery *)MBooleanQuery::Union(arg1,arg2);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MBooleanQuery **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MBooleanQuery_1Intersection(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    MBooleanQuery *arg1 = (MBooleanQuery *) 0 ;
    MBooleanQuery *arg2 = (MBooleanQuery *) 0 ;
    MBooleanQuery *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MBooleanQuery **)(void *)&jarg1; 
    arg2 = *(MBooleanQuery **)(void *)&jarg2; 
    {
        try {
            result = (MBooleanQuery *)MBooleanQuery::Intersection(arg1,arg2);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MBooleanQuery **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MBooleanQuery_1Perform(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    MBooleanQuery *arg1 = (MBooleanQuery *) 0 ;
    MQueryResults *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MBooleanQuery **)(void *)&jarg1; 
    {
        try {
            result = (MQueryResults *)(arg1)->Perform();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MQueryResults **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_new_1MBooleanQuery(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    MBooleanQuery *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (MBooleanQuery *)new MBooleanQuery();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MBooleanQuery **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_delete_1MBooleanQuery(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    MBooleanQuery *arg1 = (MBooleanQuery *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MBooleanQuery **)(void *)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MRankedQuery_1AddTerm(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
    MRankedQuery *arg1 = (MRankedQuery *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MRankedQuery **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return ;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    arg3 = (unsigned long)jarg3; 
    {
        try {
            (arg1)->AddTerm((std::string const &)*arg2,arg3);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MRankedQuery_1SetAllTermsRequired(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    MRankedQuery *arg1 = (MRankedQuery *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MRankedQuery **)(void *)&jarg1; 
    arg2 = jarg2 ? true : false; 
    {
        try {
            (arg1)->SetAllTermsRequired(arg2);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MRankedQuery_1SetMaxReturn(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    MRankedQuery *arg1 = (MRankedQuery *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MRankedQuery **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            (arg1)->SetMaxReturn(arg2);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MRankedQuery_1SetAlgorithm(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    MRankedQuery *arg1 = (MRankedQuery *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MRankedQuery **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return ;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    {
        try {
            (arg1)->SetAlgorithm((std::string const &)*arg2);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MRankedQuery_1Perform_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    MRankedQuery *arg1 = (MRankedQuery *) 0 ;
    MBooleanQuery *arg2 = (MBooleanQuery *) 0 ;
    MQueryResults *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MRankedQuery **)(void *)&jarg1; 
    arg2 = *(MBooleanQuery **)(void *)&jarg2; 
    {
        try {
            result = (MQueryResults *)(arg1)->Perform(arg2);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MQueryResults **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MRankedQuery_1Perform_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    MRankedQuery *arg1 = (MRankedQuery *) 0 ;
    MQueryResults *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MRankedQuery **)(void *)&jarg1; 
    {
        try {
            result = (MQueryResults *)(arg1)->Perform();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MQueryResults **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_new_1MRankedQuery(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    MRankedQuery *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (MRankedQuery *)new MRankedQuery();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MRankedQuery **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_delete_1MRankedQuery(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    MRankedQuery *arg1 = (MRankedQuery *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MRankedQuery **)(void *)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT jstring JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MQueryResults_1Next(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    MQueryResults *arg1 = (MQueryResults *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MQueryResults **)(void *)&jarg1; 
    {
        try {
            result = (char *)(arg1)->Next();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MQueryResults_1Score(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    MQueryResults *arg1 = (MQueryResults *) 0 ;
    unsigned long result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MQueryResults **)(void *)&jarg1; 
    {
        try {
            result = (unsigned long)((MQueryResults const *)arg1)->Score();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MQueryResults_1Skip(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    MQueryResults *arg1 = (MQueryResults *) 0 ;
    long arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MQueryResults **)(void *)&jarg1; 
    arg2 = (long)jarg2; 
    {
        try {
            (arg1)->Skip(arg2);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MQueryResults_1Count(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    jlong jresult = 0 ;
    MQueryResults *arg1 = (MQueryResults *) 0 ;
    bool arg2 ;
    unsigned long result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MQueryResults **)(void *)&jarg1; 
    arg2 = jarg2 ? true : false; 
    {
        try {
            result = (unsigned long)((MQueryResults const *)arg1)->Count(arg2);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MQueryResults_1Blast(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jlong jarg4, jdouble jarg5, jboolean jarg6, jboolean jarg7, jlong jarg8, jlong jarg9) {
    jlong jresult = 0 ;
    MQueryResults *arg1 = (MQueryResults *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    unsigned long arg4 ;
    double arg5 ;
    bool arg6 ;
    bool arg7 ;
    unsigned long arg8 ;
    unsigned long arg9 ;
    MBlastHits *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MQueryResults **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return 0;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    if(!jarg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
    if (!arg3_pstr) return 0;
    std::string arg3_str(arg3_pstr);
    arg3 = &arg3_str;
    jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
    arg4 = (unsigned long)jarg4; 
    arg5 = (double)jarg5; 
    arg6 = jarg6 ? true : false; 
    arg7 = jarg7 ? true : false; 
    arg8 = (unsigned long)jarg8; 
    arg9 = (unsigned long)jarg9; 
    {
        try {
            result = (MBlastHits *)(arg1)->Blast((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MBlastHits **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_new_1MQueryResults(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    MQueryResults *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (MQueryResults *)new MQueryResults();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MQueryResults **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_delete_1MQueryResults(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    MQueryResults *arg1 = (MQueryResults *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MQueryResults **)(void *)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT jstring JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MKeys_1Next(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    MKeys *arg1 = (MKeys *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MKeys **)(void *)&jarg1; 
    {
        try {
            result = (char *)(arg1)->Next();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MKeys_1Skip(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    MKeys *arg1 = (MKeys *) 0 ;
    long arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MKeys **)(void *)&jarg1; 
    arg2 = (long)jarg2; 
    {
        try {
            (arg1)->Skip(arg2);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_new_1MKeys(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    MKeys *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (MKeys *)new MKeys();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MKeys **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_delete_1MKeys(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    MKeys *arg1 = (MKeys *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MKeys **)(void *)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT jstring JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MIndex_1Code(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    MIndex *arg1 = (MIndex *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MIndex **)(void *)&jarg1; 
    {
        try {
            result = ((MIndex const *)arg1)->Code();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MIndex_1Type(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    MIndex *arg1 = (MIndex *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MIndex **)(void *)&jarg1; 
    {
        try {
            result = ((MIndex const *)arg1)->Type();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MIndex_1Count(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    MIndex *arg1 = (MIndex *) 0 ;
    long result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MIndex **)(void *)&jarg1; 
    {
        try {
            result = (long)((MIndex const *)arg1)->Count();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MIndex_1Keys(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    MIndex *arg1 = (MIndex *) 0 ;
    MKeys *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MIndex **)(void *)&jarg1; 
    {
        try {
            result = (MKeys *)(arg1)->Keys();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MKeys **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MIndex_1FindKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    MIndex *arg1 = (MIndex *) 0 ;
    std::string *arg2 = 0 ;
    MKeys *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MIndex **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return 0;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    {
        try {
            result = (MKeys *)(arg1)->FindKey((std::string const &)*arg2);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MKeys **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MIndex_1GetIDF(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jfloat jresult = 0 ;
    MIndex *arg1 = (MIndex *) 0 ;
    std::string *arg2 = 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MIndex **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return 0;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    {
        try {
            result = (float)(arg1)->GetIDF((std::string const &)*arg2);
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_new_1MIndex(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    MIndex *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (MIndex *)new MIndex();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MIndex **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_delete_1MIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    MIndex *arg1 = (MIndex *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MIndex **)(void *)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MIndices_1Next(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    MIndices *arg1 = (MIndices *) 0 ;
    MIndex *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MIndices **)(void *)&jarg1; 
    {
        try {
            result = (MIndex *)(arg1)->Next();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MIndex **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_new_1MIndices(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    MIndices *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (MIndices *)new MIndices();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MIndices **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_delete_1MIndices(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    MIndices *arg1 = (MIndices *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MIndices **)(void *)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT jstring JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MBlastHit_1Id(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    MBlastHit *arg1 = (MBlastHit *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MBlastHit **)(void *)&jarg1; 
    {
        try {
            result = (char *)(arg1)->Id();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MBlastHit_1Hsps(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    MBlastHit *arg1 = (MBlastHit *) 0 ;
    MBlastHsps *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MBlastHit **)(void *)&jarg1; 
    {
        try {
            result = (MBlastHsps *)(arg1)->Hsps();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MBlastHsps **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_new_1MBlastHit(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    MBlastHit *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (MBlastHit *)new MBlastHit();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MBlastHit **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_delete_1MBlastHit(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    MBlastHit *arg1 = (MBlastHit *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MBlastHit **)(void *)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT jstring JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MBlastHits_1ReportInXML(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    MBlastHits *arg1 = (MBlastHits *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MBlastHits **)(void *)&jarg1; 
    {
        try {
            result = (char *)(arg1)->ReportInXML();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MBlastHits_1Next(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    MBlastHits *arg1 = (MBlastHits *) 0 ;
    MBlastHit *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MBlastHits **)(void *)&jarg1; 
    {
        try {
            result = (MBlastHit *)(arg1)->Next();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MBlastHit **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_new_1MBlastHits(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    MBlastHits *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (MBlastHits *)new MBlastHits();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MBlastHits **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_delete_1MBlastHits(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    MBlastHits *arg1 = (MBlastHits *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MBlastHits **)(void *)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MBlastHsp_1Score(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    MBlastHsp *arg1 = (MBlastHsp *) 0 ;
    unsigned long result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MBlastHsp **)(void *)&jarg1; 
    {
        try {
            result = (unsigned long)(arg1)->Score();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MBlastHsp_1BitScore(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    MBlastHsp *arg1 = (MBlastHsp *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MBlastHsp **)(void *)&jarg1; 
    {
        try {
            result = (double)(arg1)->BitScore();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MBlastHsp_1Expect(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    MBlastHsp *arg1 = (MBlastHsp *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MBlastHsp **)(void *)&jarg1; 
    {
        try {
            result = (double)(arg1)->Expect();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MBlastHsp_1QueryStart(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    MBlastHsp *arg1 = (MBlastHsp *) 0 ;
    unsigned long result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MBlastHsp **)(void *)&jarg1; 
    {
        try {
            result = (unsigned long)(arg1)->QueryStart();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MBlastHsp_1SubjectStart(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    MBlastHsp *arg1 = (MBlastHsp *) 0 ;
    unsigned long result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MBlastHsp **)(void *)&jarg1; 
    {
        try {
            result = (unsigned long)(arg1)->SubjectStart();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MBlastHsp_1QueryAlignment(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    MBlastHsp *arg1 = (MBlastHsp *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MBlastHsp **)(void *)&jarg1; 
    {
        try {
            result = (arg1)->QueryAlignment();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MBlastHsp_1SubjectAlignment(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    MBlastHsp *arg1 = (MBlastHsp *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MBlastHsp **)(void *)&jarg1; 
    {
        try {
            result = (arg1)->SubjectAlignment();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_new_1MBlastHsp(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    MBlastHsp *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (MBlastHsp *)new MBlastHsp();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MBlastHsp **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_delete_1MBlastHsp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    MBlastHsp *arg1 = (MBlastHsp *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MBlastHsp **)(void *)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_MBlastHsps_1Next(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    MBlastHsps *arg1 = (MBlastHsps *) 0 ;
    MBlastHsp *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MBlastHsps **)(void *)&jarg1; 
    {
        try {
            result = (MBlastHsp *)(arg1)->Next();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MBlastHsp **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_new_1MBlastHsps(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    MBlastHsps *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (MBlastHsps *)new MBlastHsps();
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return 0;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return 0;
        }
    }
    *(MBlastHsps **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_nl_ru_cmbi_MRSPlugin_MRSJNI_delete_1MBlastHsps(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    MBlastHsps *arg1 = (MBlastHsps *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MBlastHsps **)(void *)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (const std::exception& e) {
            gErrStr = e.what();
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, e.what());
            return ;
        }
        catch (...) {
            gErrStr = "Unknown exception";
            jclass clazz = jenv->FindClass("java/lang/Exception");
            jenv->ThrowNew(clazz, "Unknown exception");
            return ;
        }
    }
}


#ifdef __cplusplus
}
#endif

