/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.27
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/***********************************************************************
 *
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 *
 ************************************************************************/

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
#  if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#    define SWIGTEMPLATEDISAMBIGUATOR template
#  else
#    define SWIGTEMPLATEDISAMBIGUATOR 
#  endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__) || defined(__ICC)
#   define SWIGUNUSED __attribute__ ((unused)) 
# else
#   define SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods for Windows DLLs */
#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   define SWIGEXPORT
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif


/***********************************************************************
 * swigrun.swg
 *
 *     This file contains generic CAPI SWIG runtime support for pointer
 *     type checking.
 *
 ************************************************************************/

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "2"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;


/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (int)(*f1 - *f2);
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}


/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu = 0;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* ---------------------------------------------------------------------- -*- c -*-
 * perl5.swg
 *
 * Perl5 runtime library
 * $Header: /cvsroot/swig/SWIG/Lib/perl5/perlrun.swg,v 1.21 2005/02/01 00:08:17 wuzzeb Exp $
 * ----------------------------------------------------------------------------- */

#define SWIGPERL
#define SWIGPERL5
#ifdef __cplusplus
/* Needed on some windows machines---since MS plays funny games with the header files under C++ */
#include <math.h>
#include <stdlib.h>
extern "C" {
#endif
#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

/* Get rid of free and malloc defined by perl */
#undef free
#undef malloc

#ifndef pTHX_
#define pTHX_
#endif

#include <string.h>
#ifdef __cplusplus
}
#endif

/* Macro to call an XS function */

#ifdef PERL_OBJECT 
#  define SWIG_CALLXS(_name) _name(cv,pPerl) 
#else 
#  ifndef MULTIPLICITY 
#    define SWIG_CALLXS(_name) _name(cv) 
#  else 
#    define SWIG_CALLXS(_name) _name(PERL_GET_THX, cv) 
#  endif 
#endif 

/* Contract support */

#define SWIG_contract_assert(expr,msg) if (!(expr)) { SWIG_croak(msg); } else

/* Note: SwigMagicFuncHack is a typedef used to get the C++ compiler to just shut up already */

#ifdef PERL_OBJECT
#define MAGIC_PPERL  CPerlObj *pPerl = (CPerlObj *) this;
typedef int (CPerlObj::*SwigMagicFunc)(SV *, MAGIC *);

#ifdef __cplusplus
extern "C" {
#endif
typedef int (CPerlObj::*SwigMagicFuncHack)(SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#define SWIG_MAGIC(a,b) (SV *a, MAGIC *b)
#define SWIGCLASS_STATIC
#else
#define MAGIC_PPERL
#define SWIGCLASS_STATIC static
#ifndef MULTIPLICITY
#define SWIG_MAGIC(a,b) (SV *a, MAGIC *b)
typedef int (*SwigMagicFunc)(SV *, MAGIC *);

#ifdef __cplusplus
extern "C" {
#endif
typedef int (*SwigMagicFuncHack)(SV *, MAGIC *);
#ifdef __cplusplus
}
#endif


#else
#define SWIG_MAGIC(a,b) (struct interpreter *interp, SV *a, MAGIC *b)
typedef int (*SwigMagicFunc)(struct interpreter *, SV *, MAGIC *);
#ifdef __cplusplus
extern "C" {
#endif
typedef int (*SwigMagicFuncHack)(struct interpreter *, SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#endif
#endif

#if defined(WIN32) && defined(PERL_OBJECT) && !defined(PerlIO_exportFILE)
#define PerlIO_exportFILE(fh,fl) (FILE*)(fh)
#endif

/* Modifications for newer Perl 5.005 releases */

#if !defined(PERL_REVISION) || ((PERL_REVISION >= 5) && ((PERL_VERSION < 5) || ((PERL_VERSION == 5) && (PERL_SUBVERSION < 50))))
#  ifndef PL_sv_yes
#    define PL_sv_yes sv_yes
#  endif
#  ifndef PL_sv_undef
#    define PL_sv_undef sv_undef
#  endif
#  ifndef PL_na
#    define PL_na na
#  endif
#endif

#include <stdlib.h>

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_OWNER 1
#define SWIG_SHADOW 2

/* Common SWIG API */

#ifdef PERL_OBJECT
#  define SWIG_ConvertPtr(obj, pp, type, flags) \
     SWIG_Perl_ConvertPtr(pPerl, obj, pp, type, flags)
#  define SWIG_NewPointerObj(p, type, flags) \
     SWIG_Perl_NewPointerObj(pPerl, p, type, flags)
#  define SWIG_MakePackedObj(sv, p, s, type)	\
     SWIG_Perl_MakePackedObj(pPerl, sv, p, s, type)
#  define SWIG_ConvertPacked(obj, p, s, type, flags) \
     SWIG_Perl_ConvertPacked(pPerl, obj, p, s, type, flags)

#else
#  define SWIG_ConvertPtr(obj, pp, type, flags) \
     SWIG_Perl_ConvertPtr(obj, pp, type, flags)
#  define SWIG_NewPointerObj(p, type, flags) \
     SWIG_Perl_NewPointerObj(p, type, flags)
#  define SWIG_MakePackedObj(sv, p, s, type)	\
     SWIG_Perl_MakePackedObj(sv, p, s, type )
#  define SWIG_ConvertPacked(obj, p, s, type, flags) \
     SWIG_Perl_ConvertPacked(obj, p, s, type, flags)
#endif

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Perl_GetModule()
#define SWIG_SetModule(clientdata, pointer) SWIG_Perl_SetModule(pointer)

/* Perl-specific API */
#ifdef PERL_OBJECT
#  define SWIG_MakePtr(sv, ptr, type, flags) \
     SWIG_Perl_MakePtr(pPerl, sv, ptr, type, flags)
#  define SWIG_SetError(str) \
     SWIG_Perl_SetError(pPerl, str)
#else
#  define SWIG_MakePtr(sv, ptr, type, flags) \
     SWIG_Perl_MakePtr(sv, ptr, type, flags)
#  define SWIG_SetError(str) \
     SWIG_Perl_SetError(str)
#  define SWIG_SetErrorSV(str) \
     SWIG_Perl_SetErrorSV(str)
#endif

#define SWIG_SetErrorf SWIG_Perl_SetErrorf


#ifdef PERL_OBJECT
#  define SWIG_MAYBE_PERL_OBJECT CPerlObj *pPerl,
#else
#  define SWIG_MAYBE_PERL_OBJECT
#endif

static swig_cast_info *
SWIG_Perl_TypeCheckRV(SWIG_MAYBE_PERL_OBJECT SV *rv, swig_type_info *ty) {
  SWIG_TypeCheck_Template(sv_derived_from(rv, (char *) iter->type->name), ty);
}

/* Function for getting a pointer value */

static int
SWIG_Perl_ConvertPtr(SWIG_MAYBE_PERL_OBJECT SV *sv, void **ptr, swig_type_info *_t, int flags) {
  swig_cast_info *tc;
  void *voidptr = (void *)0;

  /* If magical, apply more magic */
  if (SvGMAGICAL(sv))
    mg_get(sv);

  /* Check to see if this is an object */
  if (sv_isobject(sv)) {
    SV *tsv = (SV*) SvRV(sv);
    IV tmp = 0;
    if ((SvTYPE(tsv) == SVt_PVHV)) {
      MAGIC *mg;
      if (SvMAGICAL(tsv)) {
        mg = mg_find(tsv,'P');
        if (mg) {
          sv = mg->mg_obj;
          if (sv_isobject(sv)) {
            tmp = SvIV((SV*)SvRV(sv));
          }
        }
      } else {
        return -1;
      }
    } else {
      tmp = SvIV((SV*)SvRV(sv));
    }
    voidptr = (void *)tmp;
    if (!_t) {
      *(ptr) = voidptr;
      return 0;
    }
  } else if (! SvOK(sv)) {            /* Check for undef */
    *(ptr) = (void *) 0;
    return 0;
  } else if (SvTYPE(sv) == SVt_RV) {  /* Check for NULL pointer */
    *(ptr) = (void *) 0;
    if (!SvROK(sv))
      return 0;
    else
      return -1;
  } else {                            /* Don't know what it is */
    *(ptr) = (void *) 0;
    return -1;
  }
  if (_t) {
    /* Now see if the types match */
    char *_c = HvNAME(SvSTASH(SvRV(sv)));
    tc = SWIG_TypeCheck(_c,_t);
    if (!tc) {
      *ptr = voidptr;
      return -1;
    }
    *ptr = SWIG_TypeCast(tc,voidptr);
    return 0;
  }
  *ptr = voidptr;
  return 0;
}

static void
SWIG_Perl_MakePtr(SWIG_MAYBE_PERL_OBJECT SV *sv, void *ptr, swig_type_info *t, int flags) {
  if (ptr && (flags & SWIG_SHADOW)) {
    SV *self;
    SV *obj=newSV(0);
    HV *hash=newHV();
    HV *stash;
    sv_setref_pv(obj, (char *) t->name, ptr);
    stash=SvSTASH(SvRV(obj));
    if (flags & SWIG_OWNER) {
      HV *hv;
      GV *gv=*(GV**)hv_fetch(stash, "OWNER", 5, TRUE);
      if (!isGV(gv))
        gv_init(gv, stash, "OWNER", 5, FALSE);
      hv=GvHVn(gv);
      hv_store_ent(hv, obj, newSViv(1), 0);
    }
    sv_magic((SV *)hash, (SV *)obj, 'P', Nullch, 0);
    SvREFCNT_dec(obj);
    self=newRV_noinc((SV *)hash);
    sv_setsv(sv, self);
    SvREFCNT_dec((SV *)self);
    sv_bless(sv, stash);
  }
  else {
    sv_setref_pv(sv, (char *) t->name, ptr);
  }
}

static SWIGINLINE SV *
SWIG_Perl_NewPointerObj(SWIG_MAYBE_PERL_OBJECT void *ptr, swig_type_info *t, int flags) {
  SV *result = sv_newmortal();
  SWIG_MakePtr(result, ptr, t, flags);
  return result;
}

static void
  SWIG_Perl_MakePackedObj(SWIG_MAYBE_PERL_OBJECT SV *sv, void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  sv_setpv(sv, result);
}

/* Convert a packed value value */
static int
SWIG_Perl_ConvertPacked(SWIG_MAYBE_PERL_OBJECT SV *obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  const char  *c = 0;

  if ((!obj) || (!SvOK(obj))) return -1;
  c = SvPV(obj, PL_na);
  /* Pointer values must start with leading underscore */
  if (*c != '_') return -1;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) return -1;
  }
  return 0;
}

static SWIGINLINE void
SWIG_Perl_SetError(SWIG_MAYBE_PERL_OBJECT const char *error) {
  if (error) sv_setpv(perl_get_sv("@", TRUE), error);
}

static SWIGINLINE void
SWIG_Perl_SetErrorSV(SWIG_MAYBE_PERL_OBJECT SV *error) {
  if (error) sv_setsv(perl_get_sv("@", TRUE), error);
}

static void
SWIG_Perl_SetErrorf(const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  sv_vsetpvfn(perl_get_sv("@", TRUE), fmt, strlen(fmt), &args, Null(SV**), 0, Null(bool*));
  va_end(args);
}

/* Macros for low-level exception handling */
#define SWIG_fail       goto fail
#define SWIG_croak(x)   { SWIG_SetError(x); goto fail; }
#define SWIG_croakSV(x) { SWIG_SetErrorSV(x); goto fail; }
/* most preprocessors do not support vararg macros :-( */
/* #define SWIG_croakf(x...) { SWIG_SetErrorf(x); goto fail; } */


typedef XS(SwigPerlWrapper);
typedef SwigPerlWrapper *SwigPerlWrapperPtr;

/* Structure for command table */
typedef struct {
  const char         *name;
  SwigPerlWrapperPtr  wrapper;
} swig_command_info;

/* Information for constant table */

#define SWIG_INT     1
#define SWIG_FLOAT   2
#define SWIG_STRING  3
#define SWIG_POINTER 4
#define SWIG_BINARY  5

/* Constant information structure */
typedef struct swig_constant_info {
    int              type;
    const char      *name;
    long             lvalue;
    double           dvalue;
    void            *pvalue;
    swig_type_info **ptype;
} swig_constant_info;

#ifdef __cplusplus
}
#endif

/* Structure for variable table */
typedef struct {
  const char   *name;
  SwigMagicFunc   set;
  SwigMagicFunc   get;
  swig_type_info  **type;
} swig_variable_info;

/* Magic variable code */
#ifndef PERL_OBJECT
#define swig_create_magic(s,a,b,c) _swig_create_magic(s,a,b,c)
  #ifndef MULTIPLICITY
     static void _swig_create_magic(SV *sv, char *name, int (*set)(SV *, MAGIC *), int (*get)(SV *,MAGIC *)) {
  #else
     static void _swig_create_magic(SV *sv, char *name, int (*set)(struct interpreter*, SV *, MAGIC *), int (*get)(struct interpreter*, SV *,MAGIC *)) {
  #endif
#else
#  define swig_create_magic(s,a,b,c) _swig_create_magic(pPerl,s,a,b,c)
static void _swig_create_magic(CPerlObj *pPerl, SV *sv, const char *name, int (CPerlObj::*set)(SV *, MAGIC *), int (CPerlObj::*get)(SV *, MAGIC *)) {
#endif
  MAGIC *mg;
  sv_magic(sv,sv,'U',(char *) name,strlen(name));
  mg = mg_find(sv,'U');
  mg->mg_virtual = (MGVTBL *) malloc(sizeof(MGVTBL));
  mg->mg_virtual->svt_get = (SwigMagicFuncHack) get;
  mg->mg_virtual->svt_set = (SwigMagicFuncHack) set;
  mg->mg_virtual->svt_len = 0;
  mg->mg_virtual->svt_clear = 0;
  mg->mg_virtual->svt_free = 0;
}


static swig_module_info *
SWIG_Perl_GetModule() {
  static void *type_pointer = (void *)0;
  SV *pointer;

  /* first check if pointer already created */
  if (!type_pointer) {
    pointer = get_sv("swig_runtime_data::type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, FALSE);
    if (pointer && SvOK(pointer)) {
      type_pointer = INT2PTR(swig_type_info **, SvIV(pointer));
    }
  }

  return (swig_module_info *) type_pointer;
}

static void
SWIG_Perl_SetModule(swig_module_info *module) {
  SV *pointer;

  /* create a new pointer */
  pointer = get_sv("swig_runtime_data::type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, TRUE);
  sv_setiv(pointer, PTR2IV(module));
}

#ifdef do_open
  #undef do_open
#endif
#ifdef do_close
  #undef do_close
#endif
#ifdef scalar
  #undef scalar
#endif
#ifdef list
  #undef list
#endif
#ifdef apply
  #undef apply
#endif
#ifdef convert
  #undef convert
#endif
#ifdef Error
  #undef Error
#endif
#ifdef form
  #undef form
#endif
#ifdef vform
  #undef vform
#endif
#ifdef LABEL
  #undef LABEL
#endif
#ifdef METHOD
  #undef METHOD
#endif
#ifdef Move
  #undef Move
#endif
#ifdef yylex
  #undef yylex
#endif
#ifdef yyparse
  #undef yyparse
#endif
#ifdef yyerror
  #undef yyerror
#endif
#ifdef invert
  #undef invert
#endif
#ifdef ref
  #undef ref
#endif
#ifdef ENTER
  #undef ENTER
#endif
#ifdef read
  #undef read
#endif
#ifdef write
  #undef write
#endif
#ifdef eof
  #undef eof
#endif
#ifdef bool
  #undef bool
#endif
#ifdef close
  #undef close
#endif
#ifdef rewind
  #undef rewind
#endif



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_MBlastHit swig_types[0]
#define SWIGTYPE_p_MBlastHits swig_types[1]
#define SWIGTYPE_p_MBlastHsp swig_types[2]
#define SWIGTYPE_p_MBlastHsps swig_types[3]
#define SWIGTYPE_p_MBooleanQuery swig_types[4]
#define SWIGTYPE_p_MDatabank swig_types[5]
#define SWIGTYPE_p_MIndex swig_types[6]
#define SWIGTYPE_p_MIndices swig_types[7]
#define SWIGTYPE_p_MKeys swig_types[8]
#define SWIGTYPE_p_MQueryResults swig_types[9]
#define SWIGTYPE_p_MRankedQuery swig_types[10]
#define SWIGTYPE_p_MStringIterator swig_types[11]
#define SWIGTYPE_p_std__string swig_types[12]
#define SWIGTYPE_p_std__vectorTMDatabank_p_t swig_types[13]
#define SWIGTYPE_p_std__vectorTstd__string_t swig_types[14]
static swig_type_info *swig_types[16];
static swig_module_info swig_module = {swig_types, 15, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    boot_MRS

#define SWIG_name   "MRSc::boot_MRS"
#define SWIG_prefix "MRSc::"

#ifdef __cplusplus
extern "C"
#endif
#ifndef PERL_OBJECT
#ifndef MULTIPLICITY
SWIGEXPORT void SWIG_init (CV* cv);
#else
SWIGEXPORT void SWIG_init (pTHXo_ CV* cv);
#endif
#else
SWIGEXPORT void SWIG_init (CV *cv, CPerlObj *);
#endif


#define  SWIG_MemoryError    1
#define  SWIG_IOError        2
#define  SWIG_RuntimeError   3
#define  SWIG_IndexError     4
#define  SWIG_TypeError      5
#define  SWIG_DivisionByZero 6
#define  SWIG_OverflowError  7
#define  SWIG_SyntaxError    8
#define  SWIG_ValueError     9
#define  SWIG_SystemError   10
#define  SWIG_UnknownError  99


#define SWIG_exception(a,b)   SWIG_croak(b)


#include <stdexcept>


#include <string>


#include <vector>
#include <iostream>
using namespace std;


class MDatabank;
typedef std::vector<MDatabank*> 	MDatabankArray;
typedef std::vector<std::string>	MStringArray;


#include "MRSInterface.h"

#ifdef PERL_OBJECT
#define MAGIC_CLASS _wrap_MRS_var::
class _wrap_MRS_var : public CPerlObj {
public:
#else
#define MAGIC_CLASS
#endif
SWIGCLASS_STATIC int swig_magic_readonly(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    sv = sv; mg = mg;
    croak("Value is read-only.");
    return 0;
}
SWIGCLASS_STATIC int _wrap_set_gErrStr(pTHX_ SV* sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        std::string * temp;
        if (SWIG_ConvertPtr(sv,(void **) &temp, SWIGTYPE_p_std__string,0) < 0) {
            croak("Type error in argument $argnum of gErrStr. Expected _p_std__string");
        }
        gErrStr = *temp;
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_gErrStr(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    sv_setiv(SvRV(sv), (IV) &gErrStr);
    return 1;
}


SWIGCLASS_STATIC int _wrap_set_VERBOSE(pTHX_ SV* sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    VERBOSE = (int) SvIV(sv);
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_VERBOSE(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    sv_setiv(sv, (IV) VERBOSE);
    return 1;
}


SWIGCLASS_STATIC int _wrap_set_THREADS(pTHX_ SV* sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    THREADS = (unsigned int) SvUV(sv);
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_THREADS(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    sv_setuv(sv, (UV) THREADS);
    return 1;
}


SWIGCLASS_STATIC int _wrap_set_COMPRESSION(pTHX_ SV* sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        char *_a = (char *) SvPV(sv,PL_na);
        COMPRESSION = new char[strlen(_a)+1];
        strcpy((char *)COMPRESSION,_a);
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_COMPRESSION(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    if (COMPRESSION) {
        sv_setpv((SV*)sv, (char *) COMPRESSION);
    } else {
        sv_setsv((SV*)sv, &PL_sv_undef);
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_set_COMPRESSION_LEVEL(pTHX_ SV* sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    COMPRESSION_LEVEL = (int) SvIV(sv);
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_COMPRESSION_LEVEL(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    sv_setiv(sv, (IV) COMPRESSION_LEVEL);
    return 1;
}


SWIGCLASS_STATIC int _wrap_set_WEIGHT_BIT_COUNT(pTHX_ SV* sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    WEIGHT_BIT_COUNT = (unsigned int) SvUV(sv);
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_WEIGHT_BIT_COUNT(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    sv_setuv(sv, (UV) WEIGHT_BIT_COUNT);
    return 1;
}


SWIGCLASS_STATIC int _wrap_set_COMPRESSION_DICTIONARY(pTHX_ SV* sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        char *_a = (char *) SvPV(sv,PL_na);
        COMPRESSION_DICTIONARY = new char[strlen(_a)+1];
        strcpy((char *)COMPRESSION_DICTIONARY,_a);
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_COMPRESSION_DICTIONARY(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    if (COMPRESSION_DICTIONARY) {
        sv_setpv((SV*)sv, (char *) COMPRESSION_DICTIONARY);
    } else {
        sv_setsv((SV*)sv, &PL_sv_undef);
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_MDatabank_kWildCardString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    if (MDatabank::kWildCardString) {
        sv_setpv((SV*)sv, (char *) MDatabank::kWildCardString);
    } else {
        sv_setsv((SV*)sv, &PL_sv_undef);
    }
    return 1;
}




#ifdef PERL_OBJECT
};
#endif

#ifdef __cplusplus
extern "C" {
#endif
XS(_wrap_errstr) {
    {
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: errstr();");
        }
        {
            try {
                result = errstr();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DUST) {
    {
        std::string *arg1 = 0 ;
        std::string result;
        std::string temp1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DUST(inSequence);");
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(0), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 1 of DUST.");
            } else {
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            try {
                result = DUST((std::string const &)*arg1);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SEG) {
    {
        std::string *arg1 = 0 ;
        std::string result;
        std::string temp1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SEG(inSequence);");
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(0), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 1 of SEG.");
            } else {
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            try {
                result = SEG((std::string const &)*arg1);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_MStringIterator) {
    {
        std::vector<std::string > *arg1 = 0 ;
        MStringIterator *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_MStringIterator(inStrings);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__vectorTstd__string_t,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_MStringIterator. Expected _p_std__vectorTstd__string_t");
            }
        }
        {
            try {
                result = (MStringIterator *)new MStringIterator(*arg1);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MStringIterator, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MStringIterator_Next) {
    {
        MStringIterator *arg1 = (MStringIterator *) 0 ;
        char *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MStringIterator_Next(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MStringIterator,0) < 0) {
                SWIG_croak("Type error in argument 1 of MStringIterator_Next. Expected _p_MStringIterator");
            }
        }
        {
            try {
                result = (char *)(arg1)->Next();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        if (result) {
            sv_setpv((SV*)ST(argvi++), (char *) result);
        } else {
            sv_setsv((SV*)ST(argvi++), &PL_sv_undef);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_MStringIterator) {
    {
        MStringIterator *arg1 = (MStringIterator *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_MStringIterator(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MStringIterator,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_MStringIterator. Expected _p_MStringIterator");
            }
        }
        {
            try {
                delete arg1;
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_MDatabank) {
    {
        std::string *arg1 = 0 ;
        MDatabank *result;
        std::string temp1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_MDatabank(inName);");
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(0), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 1 of new_MDatabank.");
            } else {
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            try {
                result = (MDatabank *)new MDatabank((std::string const &)*arg1);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MDatabank, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_Create) {
    {
        std::string *arg1 = 0 ;
        SwigValueWrapper<std::vector<std::string > > arg2 ;
        std::string *arg3 = 0 ;
        std::string *arg4 = 0 ;
        std::string *arg5 = 0 ;
        std::string *arg6 = 0 ;
        std::string *arg7 = 0 ;
        MDatabank *result;
        std::string temp1 ;
        std::string temp3 ;
        std::string temp4 ;
        std::string temp5 ;
        std::string temp6 ;
        std::string temp7 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 7) || (items > 7)) {
            SWIG_croak("Usage: MDatabank_Create(inPath,inMetaDataFields,inName,inVersion,inURL,inScriptName,inSection);");
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(0), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 1 of MDatabank_Create.");
            } else {
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            if (!SvROK(ST(1)))
            croak("Argument 2 is not a reference.");
            
            AV* av = (AV*)SvRV(ST(1));
            
            if (SvTYPE(av) != SVt_PVAV)
            croak("ST(1) is not an array.");
            
            I32 len = av_len(av) + 1;
            
            std::vector<std::string> a;
            
            for (int i = 0; i < len; ++i)
            {
                SV** tv = av_fetch(av, i, 0);
                
                STRLEN len;
                const char *ptr = SvPV(*tv, len);
                if (!ptr) {
                    SWIG_croak("Undefined variable in array.");
                } else {
                    string s(ptr, len);
                    a.push_back(s);
                }
            }
            
            arg2 = a;
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(2), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 3 of MDatabank_Create.");
            } else {
                temp3.assign(ptr, len);
                arg3 = &temp3;
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(3), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 4 of MDatabank_Create.");
            } else {
                temp4.assign(ptr, len);
                arg4 = &temp4;
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(4), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 5 of MDatabank_Create.");
            } else {
                temp5.assign(ptr, len);
                arg5 = &temp5;
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(5), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 6 of MDatabank_Create.");
            } else {
                temp6.assign(ptr, len);
                arg6 = &temp6;
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(6), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 7 of MDatabank_Create.");
            } else {
                temp7.assign(ptr, len);
                arg7 = &temp7;
            }
        }
        {
            try {
                result = (MDatabank *)MDatabank::Create((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MDatabank, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_Merge) {
    {
        std::string *arg1 = 0 ;
        SwigValueWrapper<std::vector<MDatabank * > > arg2 ;
        bool arg3 ;
        std::string *arg4 = 0 ;
        std::string *arg5 = 0 ;
        std::string *arg6 = 0 ;
        std::string *arg7 = 0 ;
        std::string temp1 ;
        std::string temp4 ;
        std::string temp5 ;
        std::string temp6 ;
        std::string temp7 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 7) || (items > 7)) {
            SWIG_croak("Usage: MDatabank_Merge(inPath,inDbs,inCopyData,inName,inURL,inScriptName,inSection);");
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(0), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 1 of MDatabank_Merge.");
            } else {
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            if (!SvROK(ST(1)))
            croak("Argument 2 is not a reference.");
            
            AV* av = (AV*)SvRV(ST(1));
            
            if (SvTYPE(av) != SVt_PVAV)
            croak("ST(1) is not an array.");
            
            I32 len = av_len(av) + 1;
            swig_type_info* ti = SWIG_TypeQuery("MDatabank");
            
            MDatabankArray a;
            
            for (int i = 0; i < len; ++i)
            {
                SV** tv = av_fetch(av, i, 0);
                
                MDatabank* obj;
                
                if (SWIG_ConvertPtr(*tv, (void **)&obj, ti, 0) != -1)
                a.push_back(obj);
                else
                SWIG_croak("Type error in argument 2 of MDatabank::Merge. Expected an array of MDatabank objects.");
            }
            
            arg2 = a;
        }
        arg3 = SvIV(ST(2)) ? true : false;
        {
            STRLEN len;
            const char *ptr = SvPV(ST(3), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 4 of MDatabank_Merge.");
            } else {
                temp4.assign(ptr, len);
                arg4 = &temp4;
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(4), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 5 of MDatabank_Merge.");
            } else {
                temp5.assign(ptr, len);
                arg5 = &temp5;
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(5), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 6 of MDatabank_Merge.");
            } else {
                temp6.assign(ptr, len);
                arg6 = &temp6;
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(6), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 7 of MDatabank_Merge.");
            } else {
                temp7.assign(ptr, len);
                arg7 = &temp7;
            }
        }
        {
            try {
                MDatabank::Merge((std::string const &)*arg1,arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_Count) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        long result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MDatabank_Count(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_Count. Expected _p_MDatabank");
            }
        }
        {
            try {
                result = (long)((MDatabank const *)arg1)->Count();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_GetCode) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MDatabank_GetCode(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_GetCode. Expected _p_MDatabank");
            }
        }
        {
            try {
                result = ((MDatabank const *)arg1)->GetCode();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_GetVersion) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MDatabank_GetVersion(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_GetVersion. Expected _p_MDatabank");
            }
        }
        {
            try {
                result = ((MDatabank const *)arg1)->GetVersion();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_GetUUID) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MDatabank_GetUUID(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_GetUUID. Expected _p_MDatabank");
            }
        }
        {
            try {
                result = ((MDatabank const *)arg1)->GetUUID();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_GetName) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MDatabank_GetName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_GetName. Expected _p_MDatabank");
            }
        }
        {
            try {
                result = ((MDatabank const *)arg1)->GetName();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_GetInfoURL) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MDatabank_GetInfoURL(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_GetInfoURL. Expected _p_MDatabank");
            }
        }
        {
            try {
                result = ((MDatabank const *)arg1)->GetInfoURL();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_GetScriptName) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MDatabank_GetScriptName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_GetScriptName. Expected _p_MDatabank");
            }
        }
        {
            try {
                result = ((MDatabank const *)arg1)->GetScriptName();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_GetSection) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MDatabank_GetSection(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_GetSection. Expected _p_MDatabank");
            }
        }
        {
            try {
                result = ((MDatabank const *)arg1)->GetSection();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_GetFilePath) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MDatabank_GetFilePath(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_GetFilePath. Expected _p_MDatabank");
            }
        }
        {
            try {
                result = ((MDatabank const *)arg1)->GetFilePath();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_IsUpToDate) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MDatabank_IsUpToDate(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_IsUpToDate. Expected _p_MDatabank");
            }
        }
        {
            try {
                result = (bool)((MDatabank const *)arg1)->IsUpToDate();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_GetRawDataSize) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        long long result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MDatabank_GetRawDataSize(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_GetRawDataSize. Expected _p_MDatabank");
            }
        }
        {
            try {
                result = (long long)((MDatabank const *)arg1)->GetRawDataSize();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        {
            char temp[256];
            sprintf(temp,"%lld", (long long) result);
            ST(argvi) = sv_newmortal();
            sv_setpv((SV*)ST(argvi++), temp);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_DumpInfo) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MDatabank_DumpInfo(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_DumpInfo. Expected _p_MDatabank");
            }
        }
        {
            try {
                ((MDatabank const *)arg1)->DumpInfo();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_DumpIndex) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MDatabank_DumpIndex(self,inIndex);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_DumpIndex. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_DumpIndex.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                ((MDatabank const *)arg1)->DumpIndex((std::string const &)*arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_PrefetchDocWeights) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MDatabank_PrefetchDocWeights(self,inIndex);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_PrefetchDocWeights. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_PrefetchDocWeights.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                (arg1)->PrefetchDocWeights((std::string const &)*arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_CountForKey) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        std::string *arg3 = 0 ;
        long result;
        std::string temp2 ;
        std::string temp3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: MDatabank_CountForKey(self,inIndex,inKey);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_CountForKey. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_CountForKey.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(2), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 3 of MDatabank_CountForKey.");
            } else {
                temp3.assign(ptr, len);
                arg3 = &temp3;
            }
        }
        {
            try {
                result = (long)((MDatabank const *)arg1)->CountForKey((std::string const &)*arg2,(std::string const &)*arg3);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_Find__SWIG_0) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        bool arg3 ;
        MQueryResults *result;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: MDatabank_Find(self,inQuery,inAutoWildcard);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_Find. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_Find.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        arg3 = SvIV(ST(2)) ? true : false;
        {
            try {
                result = (MQueryResults *)(arg1)->Find((std::string const &)*arg2,arg3);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MQueryResults, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_Find__SWIG_1) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        MQueryResults *result;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MDatabank_Find(self,inQuery);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_Find. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_Find.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                result = (MQueryResults *)(arg1)->Find((std::string const &)*arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MQueryResults, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_Find) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_MDatabank, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_MDatabank_Find__SWIG_1); return;
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_MDatabank, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_MDatabank_Find__SWIG_0); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'MDatabank_Find'");
    XSRETURN(0);
}


XS(_wrap_MDatabank_Match__SWIG_0) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        std::string *arg3 = 0 ;
        MBooleanQuery *result;
        std::string temp2 ;
        std::string temp3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: MDatabank_Match(self,inValue,inIndex);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_Match. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_Match.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(2), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 3 of MDatabank_Match.");
            } else {
                temp3.assign(ptr, len);
                arg3 = &temp3;
            }
        }
        {
            try {
                result = (MBooleanQuery *)(arg1)->Match((std::string const &)*arg2,(std::string const &)*arg3);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MBooleanQuery, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_Match__SWIG_1) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        MBooleanQuery *result;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MDatabank_Match(self,inValue);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_Match. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_Match.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                result = (MBooleanQuery *)(arg1)->Match((std::string const &)*arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MBooleanQuery, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_Match) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_MDatabank, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_MDatabank_Match__SWIG_1); return;
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_MDatabank, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvPOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_MDatabank_Match__SWIG_0); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'MDatabank_Match'");
    XSRETURN(0);
}


XS(_wrap_MDatabank_MatchRel__SWIG_0) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        std::string *arg3 = 0 ;
        std::string *arg4 = 0 ;
        MBooleanQuery *result;
        std::string temp2 ;
        std::string temp3 ;
        std::string temp4 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: MDatabank_MatchRel(self,inValue,inRelOp,inIndex);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_MatchRel. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_MatchRel.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(2), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 3 of MDatabank_MatchRel.");
            } else {
                temp3.assign(ptr, len);
                arg3 = &temp3;
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(3), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 4 of MDatabank_MatchRel.");
            } else {
                temp4.assign(ptr, len);
                arg4 = &temp4;
            }
        }
        {
            try {
                result = (MBooleanQuery *)(arg1)->MatchRel((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MBooleanQuery, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_MatchRel__SWIG_1) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        std::string *arg3 = 0 ;
        MBooleanQuery *result;
        std::string temp2 ;
        std::string temp3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: MDatabank_MatchRel(self,inValue,inRelOp);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_MatchRel. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_MatchRel.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(2), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 3 of MDatabank_MatchRel.");
            } else {
                temp3.assign(ptr, len);
                arg3 = &temp3;
            }
        }
        {
            try {
                result = (MBooleanQuery *)(arg1)->MatchRel((std::string const &)*arg2,(std::string const &)*arg3);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MBooleanQuery, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_MatchRel) {
    dXSARGS;
    
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_MDatabank, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvPOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_MDatabank_MatchRel__SWIG_1); return;
                }
            }
        }
    }
    if (items == 4) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_MDatabank, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvPOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvPOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_MDatabank_MatchRel__SWIG_0); return;
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'MDatabank_MatchRel'");
    XSRETURN(0);
}


XS(_wrap_MDatabank_BooleanQuery) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        MBooleanQuery *result;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MDatabank_BooleanQuery(self,inQuery);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_BooleanQuery. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_BooleanQuery.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                result = (MBooleanQuery *)(arg1)->BooleanQuery((std::string const &)*arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MBooleanQuery, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_RankedQuery) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        MRankedQuery *result;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MDatabank_RankedQuery(self,inIndex);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_RankedQuery. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_RankedQuery.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                result = (MRankedQuery *)(arg1)->RankedQuery((std::string const &)*arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MRankedQuery, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_Get) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        char *result;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MDatabank_Get(self,inEntryID);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_Get. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_Get.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                result = (char *)(arg1)->Get((std::string const &)*arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        if (result) {
            sv_setpv((SV*)ST(argvi++), (char *) result);
        } else {
            sv_setsv((SV*)ST(argvi++), &PL_sv_undef);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_GetMetaData) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        std::string *arg3 = 0 ;
        char *result;
        std::string temp2 ;
        std::string temp3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: MDatabank_GetMetaData(self,inEntryID,inFieldName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_GetMetaData. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_GetMetaData.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(2), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 3 of MDatabank_GetMetaData.");
            } else {
                temp3.assign(ptr, len);
                arg3 = &temp3;
            }
        }
        {
            try {
                result = (char *)(arg1)->GetMetaData((std::string const &)*arg2,(std::string const &)*arg3);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        if (result) {
            sv_setpv((SV*)ST(argvi++), (char *) result);
        } else {
            sv_setsv((SV*)ST(argvi++), &PL_sv_undef);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_GetDescription) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        char *result;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MDatabank_GetDescription(self,inEntryID);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_GetDescription. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_GetDescription.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                result = (char *)(arg1)->GetDescription((std::string const &)*arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        if (result) {
            sv_setpv((SV*)ST(argvi++), (char *) result);
        } else {
            sv_setsv((SV*)ST(argvi++), &PL_sv_undef);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_ContainsBlastIndex) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MDatabank_ContainsBlastIndex(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_ContainsBlastIndex. Expected _p_MDatabank");
            }
        }
        {
            try {
                result = (bool)((MDatabank const *)arg1)->ContainsBlastIndex();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_Sequence__SWIG_0) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        unsigned long arg3 ;
        char *result;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: MDatabank_Sequence(self,inEntryID,inIndex);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_Sequence. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_Sequence.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        arg3 = (unsigned long) SvUV(ST(2));
        {
            try {
                result = (char *)(arg1)->Sequence((std::string const &)*arg2,arg3);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        if (result) {
            sv_setpv((SV*)ST(argvi++), (char *) result);
        } else {
            sv_setsv((SV*)ST(argvi++), &PL_sv_undef);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_Sequence__SWIG_1) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        char *result;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MDatabank_Sequence(self,inEntryID);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_Sequence. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_Sequence.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                result = (char *)(arg1)->Sequence((std::string const &)*arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        if (result) {
            sv_setpv((SV*)ST(argvi++), (char *) result);
        } else {
            sv_setsv((SV*)ST(argvi++), &PL_sv_undef);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_Sequence) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_MDatabank, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_MDatabank_Sequence__SWIG_1); return;
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_MDatabank, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_MDatabank_Sequence__SWIG_0); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'MDatabank_Sequence'");
    XSRETURN(0);
}


XS(_wrap_MDatabank_Blast) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        std::string *arg3 = 0 ;
        unsigned long arg4 ;
        double arg5 ;
        bool arg6 ;
        bool arg7 ;
        unsigned long arg8 ;
        unsigned long arg9 ;
        unsigned long arg10 ;
        MBlastHits *result;
        std::string temp2 ;
        std::string temp3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 10) || (items > 10)) {
            SWIG_croak("Usage: MDatabank_Blast(self,inQuery,inMatrix,inWordSize,inExpect,inFilter,inGapped,inGapOpen,inGapExtend,inReportLimit);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_Blast. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_Blast.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(2), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 3 of MDatabank_Blast.");
            } else {
                temp3.assign(ptr, len);
                arg3 = &temp3;
            }
        }
        arg4 = (unsigned long) SvUV(ST(3));
        arg5 = (double) SvNV(ST(4));
        
        arg6 = SvIV(ST(5)) ? true : false;
        arg7 = SvIV(ST(6)) ? true : false;
        arg8 = (unsigned long) SvUV(ST(7));
        arg9 = (unsigned long) SvUV(ST(8));
        arg10 = (unsigned long) SvUV(ST(9));
        {
            try {
                result = (MBlastHits *)(arg1)->Blast((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MBlastHits, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_Index) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        MIndex *result;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MDatabank_Index(self,inIndex);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_Index. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_Index.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                result = (MIndex *)(arg1)->Index((std::string const &)*arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MIndex, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_Indices) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        MIndices *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MDatabank_Indices(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_Indices. Expected _p_MDatabank");
            }
        }
        {
            try {
                result = (MIndices *)(arg1)->Indices();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MIndices, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_SuggestCorrection) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        MStringIterator *result;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MDatabank_SuggestCorrection(self,inWord);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_SuggestCorrection. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_SuggestCorrection.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                result = (MStringIterator *)(arg1)->SuggestCorrection((std::string const &)*arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MStringIterator, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_StoreInfo) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        std::string *arg3 = 0 ;
        std::string temp2 ;
        std::string temp3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: MDatabank_StoreInfo(self,inInfoName,inInfoValue);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_StoreInfo. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_StoreInfo.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(2), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 3 of MDatabank_StoreInfo.");
            } else {
                temp3.assign(ptr, len);
                arg3 = &temp3;
            }
        }
        {
            try {
                (arg1)->StoreInfo((std::string const &)*arg2,(std::string const &)*arg3);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_SetStopWords) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        SwigValueWrapper<std::vector<std::string > > arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MDatabank_SetStopWords(self,inStopWords);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_SetStopWords. Expected _p_MDatabank");
            }
        }
        {
            if (!SvROK(ST(1)))
            croak("Argument 2 is not a reference.");
            
            AV* av = (AV*)SvRV(ST(1));
            
            if (SvTYPE(av) != SVt_PVAV)
            croak("ST(1) is not an array.");
            
            I32 len = av_len(av) + 1;
            
            std::vector<std::string> a;
            
            for (int i = 0; i < len; ++i)
            {
                SV** tv = av_fetch(av, i, 0);
                
                STRLEN len;
                const char *ptr = SvPV(*tv, len);
                if (!ptr) {
                    SWIG_croak("Undefined variable in array.");
                } else {
                    string s(ptr, len);
                    a.push_back(s);
                }
            }
            
            arg2 = a;
        }
        {
            try {
                (arg1)->SetStopWords(arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_SetXMLStyleSheetName) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MDatabank_SetXMLStyleSheetName(self,inStyleSheetName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_SetXMLStyleSheetName. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_SetXMLStyleSheetName.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                (arg1)->SetXMLStyleSheetName((std::string const &)*arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_StoreMetaData) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        std::string *arg3 = 0 ;
        std::string temp2 ;
        std::string temp3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: MDatabank_StoreMetaData(self,inFieldName,inValue);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_StoreMetaData. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_StoreMetaData.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(2), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 3 of MDatabank_StoreMetaData.");
            } else {
                temp3.assign(ptr, len);
                arg3 = &temp3;
            }
        }
        {
            try {
                (arg1)->StoreMetaData((std::string const &)*arg2,(std::string const &)*arg3);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_Store) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MDatabank_Store(self,inDocument);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_Store. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_Store.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                (arg1)->Store((std::string const &)*arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_IndexText) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        std::string *arg3 = 0 ;
        std::string temp2 ;
        std::string temp3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: MDatabank_IndexText(self,inIndex,inText);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_IndexText. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_IndexText.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(2), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 3 of MDatabank_IndexText.");
            } else {
                temp3.assign(ptr, len);
                arg3 = &temp3;
            }
        }
        {
            try {
                (arg1)->IndexText((std::string const &)*arg2,(std::string const &)*arg3);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_IndexTextAndNumbers) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        std::string *arg3 = 0 ;
        std::string temp2 ;
        std::string temp3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: MDatabank_IndexTextAndNumbers(self,inIndex,inText);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_IndexTextAndNumbers. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_IndexTextAndNumbers.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(2), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 3 of MDatabank_IndexTextAndNumbers.");
            } else {
                temp3.assign(ptr, len);
                arg3 = &temp3;
            }
        }
        {
            try {
                (arg1)->IndexTextAndNumbers((std::string const &)*arg2,(std::string const &)*arg3);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_IndexWord) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        std::string *arg3 = 0 ;
        std::string temp2 ;
        std::string temp3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: MDatabank_IndexWord(self,inIndex,inText);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_IndexWord. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_IndexWord.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(2), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 3 of MDatabank_IndexWord.");
            } else {
                temp3.assign(ptr, len);
                arg3 = &temp3;
            }
        }
        {
            try {
                (arg1)->IndexWord((std::string const &)*arg2,(std::string const &)*arg3);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_IndexValue) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        std::string *arg3 = 0 ;
        std::string temp2 ;
        std::string temp3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: MDatabank_IndexValue(self,inIndex,inText);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_IndexValue. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_IndexValue.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(2), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 3 of MDatabank_IndexValue.");
            } else {
                temp3.assign(ptr, len);
                arg3 = &temp3;
            }
        }
        {
            try {
                (arg1)->IndexValue((std::string const &)*arg2,(std::string const &)*arg3);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_IndexWordWithWeight) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        std::string *arg3 = 0 ;
        unsigned long arg4 ;
        std::string temp2 ;
        std::string temp3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: MDatabank_IndexWordWithWeight(self,inIndex,inText,inFrequency);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_IndexWordWithWeight. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_IndexWordWithWeight.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(2), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 3 of MDatabank_IndexWordWithWeight.");
            } else {
                temp3.assign(ptr, len);
                arg3 = &temp3;
            }
        }
        arg4 = (unsigned long) SvUV(ST(3));
        {
            try {
                (arg1)->IndexWordWithWeight((std::string const &)*arg2,(std::string const &)*arg3,arg4);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_IndexDate) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        std::string *arg3 = 0 ;
        std::string temp2 ;
        std::string temp3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: MDatabank_IndexDate(self,inIndex,inText);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_IndexDate. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_IndexDate.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(2), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 3 of MDatabank_IndexDate.");
            } else {
                temp3.assign(ptr, len);
                arg3 = &temp3;
            }
        }
        {
            try {
                (arg1)->IndexDate((std::string const &)*arg2,(std::string const &)*arg3);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_IndexNumber) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        std::string *arg3 = 0 ;
        std::string temp2 ;
        std::string temp3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: MDatabank_IndexNumber(self,inIndex,inText);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_IndexNumber. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_IndexNumber.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(2), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 3 of MDatabank_IndexNumber.");
            } else {
                temp3.assign(ptr, len);
                arg3 = &temp3;
            }
        }
        {
            try {
                (arg1)->IndexNumber((std::string const &)*arg2,(std::string const &)*arg3);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_AddSequence) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MDatabank_AddSequence(self,inSequence);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_AddSequence. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_AddSequence.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                (arg1)->AddSequence((std::string const &)*arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_FlushDocument) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MDatabank_FlushDocument(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_FlushDocument. Expected _p_MDatabank");
            }
        }
        {
            try {
                (arg1)->FlushDocument();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_AddXPathForIndex) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        std::string *arg3 = 0 ;
        unsigned long arg4 ;
        std::string temp2 ;
        std::string temp3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: MDatabank_AddXPathForIndex(self,inIndex,inXPath,inFlags);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_AddXPathForIndex. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_AddXPathForIndex.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(2), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 3 of MDatabank_AddXPathForIndex.");
            } else {
                temp3.assign(ptr, len);
                arg3 = &temp3;
            }
        }
        arg4 = (unsigned long) SvUV(ST(3));
        {
            try {
                (arg1)->AddXPathForIndex((std::string const &)*arg2,(std::string const &)*arg3,arg4);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_AddXMLDocument) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MDatabank_AddXMLDocument(self,inDoc);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_AddXMLDocument. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_AddXMLDocument.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                (arg1)->AddXMLDocument((std::string const &)*arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_Finish__SWIG_0) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        bool arg2 ;
        bool arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: MDatabank_Finish(self,inCreateAllTextIndex,inCreateUpdateDatabank);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_Finish. Expected _p_MDatabank");
            }
        }
        arg2 = SvIV(ST(1)) ? true : false;
        arg3 = SvIV(ST(2)) ? true : false;
        {
            try {
                (arg1)->Finish(arg2,arg3);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_Finish__SWIG_1) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MDatabank_Finish(self,inCreateAllTextIndex);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_Finish. Expected _p_MDatabank");
            }
        }
        arg2 = SvIV(ST(1)) ? true : false;
        {
            try {
                (arg1)->Finish(arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_Finish__SWIG_2) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MDatabank_Finish(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_Finish. Expected _p_MDatabank");
            }
        }
        {
            try {
                (arg1)->Finish();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_Finish) {
    dXSARGS;
    
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_MDatabank, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_MDatabank_Finish__SWIG_2); return;
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_MDatabank, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_MDatabank_Finish__SWIG_1); return;
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_MDatabank, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_MDatabank_Finish__SWIG_0); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'MDatabank_Finish'");
    XSRETURN(0);
}


XS(_wrap_MDatabank_CreateDictionary) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string arg2 ;
        long arg3 ;
        long arg4 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: MDatabank_CreateDictionary(self,inIndices,inMinOccurrence,inMinWordLength);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_CreateDictionary. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_CreateDictionary.");
            } else {
                arg2 = std::string(ptr, len);
            }
        }
        arg3 = (long) SvIV(ST(2));
        arg4 = (long) SvIV(ST(3));
        {
            try {
                (arg1)->CreateDictionary(arg2,arg3,arg4);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_MDatabank) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_MDatabank(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_MDatabank. Expected _p_MDatabank");
            }
        }
        {
            try {
                delete arg1;
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBooleanQuery_Not) {
    {
        MBooleanQuery *arg1 = (MBooleanQuery *) 0 ;
        MBooleanQuery *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBooleanQuery_Not(inQuery);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBooleanQuery,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBooleanQuery_Not. Expected _p_MBooleanQuery");
            }
        }
        {
            try {
                result = (MBooleanQuery *)MBooleanQuery::Not(arg1);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MBooleanQuery, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBooleanQuery_Union) {
    {
        MBooleanQuery *arg1 = (MBooleanQuery *) 0 ;
        MBooleanQuery *arg2 = (MBooleanQuery *) 0 ;
        MBooleanQuery *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MBooleanQuery_Union(inQueryA,inQueryB);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBooleanQuery,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBooleanQuery_Union. Expected _p_MBooleanQuery");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_MBooleanQuery,0) < 0) {
                SWIG_croak("Type error in argument 2 of MBooleanQuery_Union. Expected _p_MBooleanQuery");
            }
        }
        {
            try {
                result = (MBooleanQuery *)MBooleanQuery::Union(arg1,arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MBooleanQuery, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBooleanQuery_Intersection) {
    {
        MBooleanQuery *arg1 = (MBooleanQuery *) 0 ;
        MBooleanQuery *arg2 = (MBooleanQuery *) 0 ;
        MBooleanQuery *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MBooleanQuery_Intersection(inQueryA,inQueryB);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBooleanQuery,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBooleanQuery_Intersection. Expected _p_MBooleanQuery");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_MBooleanQuery,0) < 0) {
                SWIG_croak("Type error in argument 2 of MBooleanQuery_Intersection. Expected _p_MBooleanQuery");
            }
        }
        {
            try {
                result = (MBooleanQuery *)MBooleanQuery::Intersection(arg1,arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MBooleanQuery, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBooleanQuery_Perform) {
    {
        MBooleanQuery *arg1 = (MBooleanQuery *) 0 ;
        MQueryResults *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBooleanQuery_Perform(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBooleanQuery,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBooleanQuery_Perform. Expected _p_MBooleanQuery");
            }
        }
        {
            try {
                result = (MQueryResults *)(arg1)->Perform();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MQueryResults, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBooleanQuery_Prefetch) {
    {
        MBooleanQuery *arg1 = (MBooleanQuery *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBooleanQuery_Prefetch(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBooleanQuery,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBooleanQuery_Prefetch. Expected _p_MBooleanQuery");
            }
        }
        {
            try {
                (arg1)->Prefetch();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_MBooleanQuery) {
    {
        MBooleanQuery *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_MBooleanQuery();");
        }
        {
            try {
                result = (MBooleanQuery *)new MBooleanQuery();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MBooleanQuery, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_MBooleanQuery) {
    {
        MBooleanQuery *arg1 = (MBooleanQuery *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_MBooleanQuery(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBooleanQuery,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_MBooleanQuery. Expected _p_MBooleanQuery");
            }
        }
        {
            try {
                delete arg1;
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MRankedQuery_AddTerm) {
    {
        MRankedQuery *arg1 = (MRankedQuery *) 0 ;
        std::string *arg2 = 0 ;
        unsigned long arg3 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: MRankedQuery_AddTerm(self,inTerm,inFrequency);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MRankedQuery,0) < 0) {
                SWIG_croak("Type error in argument 1 of MRankedQuery_AddTerm. Expected _p_MRankedQuery");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MRankedQuery_AddTerm.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        arg3 = (unsigned long) SvUV(ST(2));
        {
            try {
                (arg1)->AddTerm((std::string const &)*arg2,arg3);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MRankedQuery_AddTermsFromText) {
    {
        MRankedQuery *arg1 = (MRankedQuery *) 0 ;
        std::string *arg2 = 0 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MRankedQuery_AddTermsFromText(self,inText);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MRankedQuery,0) < 0) {
                SWIG_croak("Type error in argument 1 of MRankedQuery_AddTermsFromText. Expected _p_MRankedQuery");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MRankedQuery_AddTermsFromText.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                (arg1)->AddTermsFromText((std::string const &)*arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MRankedQuery_SetAllTermsRequired) {
    {
        MRankedQuery *arg1 = (MRankedQuery *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MRankedQuery_SetAllTermsRequired(self,inRequired);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MRankedQuery,0) < 0) {
                SWIG_croak("Type error in argument 1 of MRankedQuery_SetAllTermsRequired. Expected _p_MRankedQuery");
            }
        }
        arg2 = SvIV(ST(1)) ? true : false;
        {
            try {
                (arg1)->SetAllTermsRequired(arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MRankedQuery_SetMaxReturn) {
    {
        MRankedQuery *arg1 = (MRankedQuery *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MRankedQuery_SetMaxReturn(self,inMaxReturn);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MRankedQuery,0) < 0) {
                SWIG_croak("Type error in argument 1 of MRankedQuery_SetMaxReturn. Expected _p_MRankedQuery");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            try {
                (arg1)->SetMaxReturn(arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MRankedQuery_SetAlgorithm) {
    {
        MRankedQuery *arg1 = (MRankedQuery *) 0 ;
        std::string *arg2 = 0 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MRankedQuery_SetAlgorithm(self,inAlgorithm);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MRankedQuery,0) < 0) {
                SWIG_croak("Type error in argument 1 of MRankedQuery_SetAlgorithm. Expected _p_MRankedQuery");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MRankedQuery_SetAlgorithm.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                (arg1)->SetAlgorithm((std::string const &)*arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MRankedQuery_Perform__SWIG_0) {
    {
        MRankedQuery *arg1 = (MRankedQuery *) 0 ;
        MBooleanQuery *arg2 = (MBooleanQuery *) 0 ;
        MQueryResults *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MRankedQuery_Perform(self,inMetaQuery);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MRankedQuery,0) < 0) {
                SWIG_croak("Type error in argument 1 of MRankedQuery_Perform. Expected _p_MRankedQuery");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_MBooleanQuery,0) < 0) {
                SWIG_croak("Type error in argument 2 of MRankedQuery_Perform. Expected _p_MBooleanQuery");
            }
        }
        {
            try {
                result = (MQueryResults *)(arg1)->Perform(arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MQueryResults, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MRankedQuery_Perform__SWIG_1) {
    {
        MRankedQuery *arg1 = (MRankedQuery *) 0 ;
        MQueryResults *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MRankedQuery_Perform(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MRankedQuery,0) < 0) {
                SWIG_croak("Type error in argument 1 of MRankedQuery_Perform. Expected _p_MRankedQuery");
            }
        }
        {
            try {
                result = (MQueryResults *)(arg1)->Perform();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MQueryResults, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MRankedQuery_Perform) {
    dXSARGS;
    
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_MRankedQuery, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_MRankedQuery_Perform__SWIG_1); return;
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_MRankedQuery, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_MBooleanQuery, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_MRankedQuery_Perform__SWIG_0); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'MRankedQuery_Perform'");
    XSRETURN(0);
}


XS(_wrap_new_MRankedQuery) {
    {
        MRankedQuery *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_MRankedQuery();");
        }
        {
            try {
                result = (MRankedQuery *)new MRankedQuery();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MRankedQuery, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_MRankedQuery) {
    {
        MRankedQuery *arg1 = (MRankedQuery *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_MRankedQuery(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MRankedQuery,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_MRankedQuery. Expected _p_MRankedQuery");
            }
        }
        {
            try {
                delete arg1;
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MQueryResults_Next) {
    {
        MQueryResults *arg1 = (MQueryResults *) 0 ;
        char *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MQueryResults_Next(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MQueryResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of MQueryResults_Next. Expected _p_MQueryResults");
            }
        }
        {
            try {
                result = (char *)(arg1)->Next();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        if (result) {
            sv_setpv((SV*)ST(argvi++), (char *) result);
        } else {
            sv_setsv((SV*)ST(argvi++), &PL_sv_undef);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MQueryResults_Score) {
    {
        MQueryResults *arg1 = (MQueryResults *) 0 ;
        unsigned long result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MQueryResults_Score(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MQueryResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of MQueryResults_Score. Expected _p_MQueryResults");
            }
        }
        {
            try {
                result = (unsigned long)((MQueryResults const *)arg1)->Score();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MQueryResults_Skip) {
    {
        MQueryResults *arg1 = (MQueryResults *) 0 ;
        long arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MQueryResults_Skip(self,inCount);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MQueryResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of MQueryResults_Skip. Expected _p_MQueryResults");
            }
        }
        arg2 = (long) SvIV(ST(1));
        {
            try {
                (arg1)->Skip(arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MQueryResults_Count) {
    {
        MQueryResults *arg1 = (MQueryResults *) 0 ;
        bool arg2 ;
        unsigned long result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MQueryResults_Count(self,inExact);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MQueryResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of MQueryResults_Count. Expected _p_MQueryResults");
            }
        }
        arg2 = SvIV(ST(1)) ? true : false;
        {
            try {
                result = (unsigned long)((MQueryResults const *)arg1)->Count(arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MQueryResults_Blast) {
    {
        MQueryResults *arg1 = (MQueryResults *) 0 ;
        std::string *arg2 = 0 ;
        std::string *arg3 = 0 ;
        unsigned long arg4 ;
        double arg5 ;
        bool arg6 ;
        bool arg7 ;
        unsigned long arg8 ;
        unsigned long arg9 ;
        unsigned long arg10 ;
        MBlastHits *result;
        std::string temp2 ;
        std::string temp3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 10) || (items > 10)) {
            SWIG_croak("Usage: MQueryResults_Blast(self,inQuery,inMatrix,inWordSize,inExpect,inFilter,inGapped,inGapOpen,inGapExtend,inReportLimit);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MQueryResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of MQueryResults_Blast. Expected _p_MQueryResults");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MQueryResults_Blast.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(2), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 3 of MQueryResults_Blast.");
            } else {
                temp3.assign(ptr, len);
                arg3 = &temp3;
            }
        }
        arg4 = (unsigned long) SvUV(ST(3));
        arg5 = (double) SvNV(ST(4));
        
        arg6 = SvIV(ST(5)) ? true : false;
        arg7 = SvIV(ST(6)) ? true : false;
        arg8 = (unsigned long) SvUV(ST(7));
        arg9 = (unsigned long) SvUV(ST(8));
        arg10 = (unsigned long) SvUV(ST(9));
        {
            try {
                result = (MBlastHits *)(arg1)->Blast((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MBlastHits, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_MQueryResults) {
    {
        MQueryResults *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_MQueryResults();");
        }
        {
            try {
                result = (MQueryResults *)new MQueryResults();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MQueryResults, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_MQueryResults) {
    {
        MQueryResults *arg1 = (MQueryResults *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_MQueryResults(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MQueryResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_MQueryResults. Expected _p_MQueryResults");
            }
        }
        {
            try {
                delete arg1;
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MKeys_Next) {
    {
        MKeys *arg1 = (MKeys *) 0 ;
        char *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MKeys_Next(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MKeys,0) < 0) {
                SWIG_croak("Type error in argument 1 of MKeys_Next. Expected _p_MKeys");
            }
        }
        {
            try {
                result = (char *)(arg1)->Next();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        if (result) {
            sv_setpv((SV*)ST(argvi++), (char *) result);
        } else {
            sv_setsv((SV*)ST(argvi++), &PL_sv_undef);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MKeys_Skip) {
    {
        MKeys *arg1 = (MKeys *) 0 ;
        long arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MKeys_Skip(self,inCount);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MKeys,0) < 0) {
                SWIG_croak("Type error in argument 1 of MKeys_Skip. Expected _p_MKeys");
            }
        }
        arg2 = (long) SvIV(ST(1));
        {
            try {
                (arg1)->Skip(arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_MKeys) {
    {
        MKeys *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_MKeys();");
        }
        {
            try {
                result = (MKeys *)new MKeys();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MKeys, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_MKeys) {
    {
        MKeys *arg1 = (MKeys *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_MKeys(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MKeys,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_MKeys. Expected _p_MKeys");
            }
        }
        {
            try {
                delete arg1;
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MIndex_Code) {
    {
        MIndex *arg1 = (MIndex *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MIndex_Code(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MIndex,0) < 0) {
                SWIG_croak("Type error in argument 1 of MIndex_Code. Expected _p_MIndex");
            }
        }
        {
            try {
                result = ((MIndex const *)arg1)->Code();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MIndex_Type) {
    {
        MIndex *arg1 = (MIndex *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MIndex_Type(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MIndex,0) < 0) {
                SWIG_croak("Type error in argument 1 of MIndex_Type. Expected _p_MIndex");
            }
        }
        {
            try {
                result = ((MIndex const *)arg1)->Type();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MIndex_Count) {
    {
        MIndex *arg1 = (MIndex *) 0 ;
        long result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MIndex_Count(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MIndex,0) < 0) {
                SWIG_croak("Type error in argument 1 of MIndex_Count. Expected _p_MIndex");
            }
        }
        {
            try {
                result = (long)((MIndex const *)arg1)->Count();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MIndex_Keys) {
    {
        MIndex *arg1 = (MIndex *) 0 ;
        MKeys *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MIndex_Keys(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MIndex,0) < 0) {
                SWIG_croak("Type error in argument 1 of MIndex_Keys. Expected _p_MIndex");
            }
        }
        {
            try {
                result = (MKeys *)(arg1)->Keys();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MKeys, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MIndex_FindKey) {
    {
        MIndex *arg1 = (MIndex *) 0 ;
        std::string *arg2 = 0 ;
        MKeys *result;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MIndex_FindKey(self,inKey);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MIndex,0) < 0) {
                SWIG_croak("Type error in argument 1 of MIndex_FindKey. Expected _p_MIndex");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MIndex_FindKey.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                result = (MKeys *)(arg1)->FindKey((std::string const &)*arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MKeys, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MIndex_GetIDF) {
    {
        MIndex *arg1 = (MIndex *) 0 ;
        std::string *arg2 = 0 ;
        float result;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MIndex_GetIDF(self,inKey);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MIndex,0) < 0) {
                SWIG_croak("Type error in argument 1 of MIndex_GetIDF. Expected _p_MIndex");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MIndex_GetIDF.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                result = (float)(arg1)->GetIDF((std::string const &)*arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_MIndex) {
    {
        MIndex *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_MIndex();");
        }
        {
            try {
                result = (MIndex *)new MIndex();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MIndex, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_MIndex) {
    {
        MIndex *arg1 = (MIndex *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_MIndex(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MIndex,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_MIndex. Expected _p_MIndex");
            }
        }
        {
            try {
                delete arg1;
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MIndices_Next) {
    {
        MIndices *arg1 = (MIndices *) 0 ;
        MIndex *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MIndices_Next(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MIndices,0) < 0) {
                SWIG_croak("Type error in argument 1 of MIndices_Next. Expected _p_MIndices");
            }
        }
        {
            try {
                result = (MIndex *)(arg1)->Next();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MIndex, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_MIndices) {
    {
        MIndices *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_MIndices();");
        }
        {
            try {
                result = (MIndices *)new MIndices();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MIndices, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_MIndices) {
    {
        MIndices *arg1 = (MIndices *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_MIndices(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MIndices,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_MIndices. Expected _p_MIndices");
            }
        }
        {
            try {
                delete arg1;
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBlastHit_Id) {
    {
        MBlastHit *arg1 = (MBlastHit *) 0 ;
        char *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBlastHit_Id(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHit,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBlastHit_Id. Expected _p_MBlastHit");
            }
        }
        {
            try {
                result = (char *)(arg1)->Id();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        if (result) {
            sv_setpv((SV*)ST(argvi++), (char *) result);
        } else {
            sv_setsv((SV*)ST(argvi++), &PL_sv_undef);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBlastHit_Title) {
    {
        MBlastHit *arg1 = (MBlastHit *) 0 ;
        char *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBlastHit_Title(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHit,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBlastHit_Title. Expected _p_MBlastHit");
            }
        }
        {
            try {
                result = (char *)(arg1)->Title();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        if (result) {
            sv_setpv((SV*)ST(argvi++), (char *) result);
        } else {
            sv_setsv((SV*)ST(argvi++), &PL_sv_undef);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBlastHit_Hsps) {
    {
        MBlastHit *arg1 = (MBlastHit *) 0 ;
        MBlastHsps *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBlastHit_Hsps(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHit,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBlastHit_Hsps. Expected _p_MBlastHit");
            }
        }
        {
            try {
                result = (MBlastHsps *)(arg1)->Hsps();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MBlastHsps, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_MBlastHit) {
    {
        MBlastHit *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_MBlastHit();");
        }
        {
            try {
                result = (MBlastHit *)new MBlastHit();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MBlastHit, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_MBlastHit) {
    {
        MBlastHit *arg1 = (MBlastHit *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_MBlastHit(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHit,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_MBlastHit. Expected _p_MBlastHit");
            }
        }
        {
            try {
                delete arg1;
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBlastHits_DbCount) {
    {
        MBlastHits *arg1 = (MBlastHits *) 0 ;
        unsigned long result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBlastHits_DbCount(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHits,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBlastHits_DbCount. Expected _p_MBlastHits");
            }
        }
        {
            try {
                result = (unsigned long)(arg1)->DbCount();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBlastHits_DbLength) {
    {
        MBlastHits *arg1 = (MBlastHits *) 0 ;
        unsigned long result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBlastHits_DbLength(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHits,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBlastHits_DbLength. Expected _p_MBlastHits");
            }
        }
        {
            try {
                result = (unsigned long)(arg1)->DbLength();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBlastHits_EffectiveSpace) {
    {
        MBlastHits *arg1 = (MBlastHits *) 0 ;
        unsigned long result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBlastHits_EffectiveSpace(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHits,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBlastHits_EffectiveSpace. Expected _p_MBlastHits");
            }
        }
        {
            try {
                result = (unsigned long)(arg1)->EffectiveSpace();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBlastHits_Kappa) {
    {
        MBlastHits *arg1 = (MBlastHits *) 0 ;
        double result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBlastHits_Kappa(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHits,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBlastHits_Kappa. Expected _p_MBlastHits");
            }
        }
        {
            try {
                result = (double)(arg1)->Kappa();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBlastHits_Lambda) {
    {
        MBlastHits *arg1 = (MBlastHits *) 0 ;
        double result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBlastHits_Lambda(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHits,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBlastHits_Lambda. Expected _p_MBlastHits");
            }
        }
        {
            try {
                result = (double)(arg1)->Lambda();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBlastHits_Entropy) {
    {
        MBlastHits *arg1 = (MBlastHits *) 0 ;
        double result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBlastHits_Entropy(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHits,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBlastHits_Entropy. Expected _p_MBlastHits");
            }
        }
        {
            try {
                result = (double)(arg1)->Entropy();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBlastHits_Next) {
    {
        MBlastHits *arg1 = (MBlastHits *) 0 ;
        MBlastHit *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBlastHits_Next(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHits,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBlastHits_Next. Expected _p_MBlastHits");
            }
        }
        {
            try {
                result = (MBlastHit *)(arg1)->Next();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MBlastHit, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_MBlastHits) {
    {
        MBlastHits *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_MBlastHits();");
        }
        {
            try {
                result = (MBlastHits *)new MBlastHits();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MBlastHits, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_MBlastHits) {
    {
        MBlastHits *arg1 = (MBlastHits *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_MBlastHits(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHits,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_MBlastHits. Expected _p_MBlastHits");
            }
        }
        {
            try {
                delete arg1;
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBlastHsp_Score) {
    {
        MBlastHsp *arg1 = (MBlastHsp *) 0 ;
        unsigned long result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBlastHsp_Score(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHsp,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBlastHsp_Score. Expected _p_MBlastHsp");
            }
        }
        {
            try {
                result = (unsigned long)(arg1)->Score();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBlastHsp_BitScore) {
    {
        MBlastHsp *arg1 = (MBlastHsp *) 0 ;
        double result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBlastHsp_BitScore(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHsp,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBlastHsp_BitScore. Expected _p_MBlastHsp");
            }
        }
        {
            try {
                result = (double)(arg1)->BitScore();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBlastHsp_Expect) {
    {
        MBlastHsp *arg1 = (MBlastHsp *) 0 ;
        double result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBlastHsp_Expect(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHsp,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBlastHsp_Expect. Expected _p_MBlastHsp");
            }
        }
        {
            try {
                result = (double)(arg1)->Expect();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBlastHsp_Identity) {
    {
        MBlastHsp *arg1 = (MBlastHsp *) 0 ;
        unsigned long result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBlastHsp_Identity(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHsp,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBlastHsp_Identity. Expected _p_MBlastHsp");
            }
        }
        {
            try {
                result = (unsigned long)(arg1)->Identity();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBlastHsp_Positive) {
    {
        MBlastHsp *arg1 = (MBlastHsp *) 0 ;
        unsigned long result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBlastHsp_Positive(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHsp,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBlastHsp_Positive. Expected _p_MBlastHsp");
            }
        }
        {
            try {
                result = (unsigned long)(arg1)->Positive();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBlastHsp_Gaps) {
    {
        MBlastHsp *arg1 = (MBlastHsp *) 0 ;
        unsigned long result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBlastHsp_Gaps(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHsp,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBlastHsp_Gaps. Expected _p_MBlastHsp");
            }
        }
        {
            try {
                result = (unsigned long)(arg1)->Gaps();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBlastHsp_QueryStart) {
    {
        MBlastHsp *arg1 = (MBlastHsp *) 0 ;
        unsigned long result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBlastHsp_QueryStart(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHsp,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBlastHsp_QueryStart. Expected _p_MBlastHsp");
            }
        }
        {
            try {
                result = (unsigned long)(arg1)->QueryStart();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBlastHsp_SubjectStart) {
    {
        MBlastHsp *arg1 = (MBlastHsp *) 0 ;
        unsigned long result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBlastHsp_SubjectStart(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHsp,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBlastHsp_SubjectStart. Expected _p_MBlastHsp");
            }
        }
        {
            try {
                result = (unsigned long)(arg1)->SubjectStart();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBlastHsp_SubjectLength) {
    {
        MBlastHsp *arg1 = (MBlastHsp *) 0 ;
        unsigned long result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBlastHsp_SubjectLength(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHsp,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBlastHsp_SubjectLength. Expected _p_MBlastHsp");
            }
        }
        {
            try {
                result = (unsigned long)(arg1)->SubjectLength();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBlastHsp_QueryAlignment) {
    {
        MBlastHsp *arg1 = (MBlastHsp *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBlastHsp_QueryAlignment(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHsp,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBlastHsp_QueryAlignment. Expected _p_MBlastHsp");
            }
        }
        {
            try {
                result = (arg1)->QueryAlignment();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBlastHsp_SubjectAlignment) {
    {
        MBlastHsp *arg1 = (MBlastHsp *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBlastHsp_SubjectAlignment(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHsp,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBlastHsp_SubjectAlignment. Expected _p_MBlastHsp");
            }
        }
        {
            try {
                result = (arg1)->SubjectAlignment();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBlastHsp_Midline) {
    {
        MBlastHsp *arg1 = (MBlastHsp *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBlastHsp_Midline(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHsp,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBlastHsp_Midline. Expected _p_MBlastHsp");
            }
        }
        {
            try {
                result = (arg1)->Midline();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_MBlastHsp) {
    {
        MBlastHsp *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_MBlastHsp();");
        }
        {
            try {
                result = (MBlastHsp *)new MBlastHsp();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MBlastHsp, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_MBlastHsp) {
    {
        MBlastHsp *arg1 = (MBlastHsp *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_MBlastHsp(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHsp,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_MBlastHsp. Expected _p_MBlastHsp");
            }
        }
        {
            try {
                delete arg1;
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBlastHsps_Next) {
    {
        MBlastHsps *arg1 = (MBlastHsps *) 0 ;
        MBlastHsp *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBlastHsps_Next(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHsps,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBlastHsps_Next. Expected _p_MBlastHsps");
            }
        }
        {
            try {
                result = (MBlastHsp *)(arg1)->Next();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MBlastHsp, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_MBlastHsps) {
    {
        MBlastHsps *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_MBlastHsps();");
        }
        {
            try {
                result = (MBlastHsps *)new MBlastHsps();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MBlastHsps, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_MBlastHsps) {
    {
        MBlastHsps *arg1 = (MBlastHsps *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_MBlastHsps(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHsps,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_MBlastHsps. Expected _p_MBlastHsps");
            }
        }
        {
            try {
                delete arg1;
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_MBlastHit = {"MRS::MBlastHit", "MBlastHit *", 0, 0, 0};
static swig_type_info _swigt__p_MBlastHits = {"MRS::MBlastHits", "MBlastHits *", 0, 0, 0};
static swig_type_info _swigt__p_MBlastHsp = {"MRS::MBlastHsp", "MBlastHsp *", 0, 0, 0};
static swig_type_info _swigt__p_MBlastHsps = {"MRS::MBlastHsps", "MBlastHsps *", 0, 0, 0};
static swig_type_info _swigt__p_MBooleanQuery = {"MRS::MBooleanQuery", "MBooleanQuery *", 0, 0, 0};
static swig_type_info _swigt__p_MDatabank = {"MRS::MDatabank", "MDatabank *", 0, 0, 0};
static swig_type_info _swigt__p_MIndex = {"MRS::MIndex", "MIndex *", 0, 0, 0};
static swig_type_info _swigt__p_MIndices = {"MRS::MIndices", "MIndices *", 0, 0, 0};
static swig_type_info _swigt__p_MKeys = {"MRS::MKeys", "MKeys *", 0, 0, 0};
static swig_type_info _swigt__p_MQueryResults = {"MRS::MQueryResults", "MQueryResults *", 0, 0, 0};
static swig_type_info _swigt__p_MRankedQuery = {"MRS::MRankedQuery", "MRankedQuery *", 0, 0, 0};
static swig_type_info _swigt__p_MStringIterator = {"MRS::MStringIterator", "MStringIterator *", 0, 0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTMDatabank_p_t = {"_p_std__vectorTMDatabank_p_t", "std::vector<MDatabank * > *|MDatabankArray *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTstd__string_t = {"_p_std__vectorTstd__string_t", "std::vector<std::string > *|MStringArray *", 0, 0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_MBlastHit,
  &_swigt__p_MBlastHits,
  &_swigt__p_MBlastHsp,
  &_swigt__p_MBlastHsps,
  &_swigt__p_MBooleanQuery,
  &_swigt__p_MDatabank,
  &_swigt__p_MIndex,
  &_swigt__p_MIndices,
  &_swigt__p_MKeys,
  &_swigt__p_MQueryResults,
  &_swigt__p_MRankedQuery,
  &_swigt__p_MStringIterator,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorTMDatabank_p_t,
  &_swigt__p_std__vectorTstd__string_t,
};

static swig_cast_info _swigc__p_MBlastHit[] = {  {&_swigt__p_MBlastHit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MBlastHits[] = {  {&_swigt__p_MBlastHits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MBlastHsp[] = {  {&_swigt__p_MBlastHsp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MBlastHsps[] = {  {&_swigt__p_MBlastHsps, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MBooleanQuery[] = {  {&_swigt__p_MBooleanQuery, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MDatabank[] = {  {&_swigt__p_MDatabank, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MIndex[] = {  {&_swigt__p_MIndex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MIndices[] = {  {&_swigt__p_MIndices, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MKeys[] = {  {&_swigt__p_MKeys, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MQueryResults[] = {  {&_swigt__p_MQueryResults, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MRankedQuery[] = {  {&_swigt__p_MRankedQuery, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MStringIterator[] = {  {&_swigt__p_MStringIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTMDatabank_p_t[] = {  {&_swigt__p_std__vectorTMDatabank_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTstd__string_t[] = {  {&_swigt__p_std__vectorTstd__string_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_MBlastHit,
  _swigc__p_MBlastHits,
  _swigc__p_MBlastHsp,
  _swigc__p_MBlastHsps,
  _swigc__p_MBooleanQuery,
  _swigc__p_MDatabank,
  _swigc__p_MIndex,
  _swigc__p_MIndices,
  _swigc__p_MKeys,
  _swigc__p_MQueryResults,
  _swigc__p_MRankedQuery,
  _swigc__p_MStringIterator,
  _swigc__p_std__string,
  _swigc__p_std__vectorTMDatabank_p_t,
  _swigc__p_std__vectorTstd__string_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_constant_info swig_constants[] = {
{ SWIG_INT,     (char *) SWIG_prefix "MDatabank_IS_VALUE_INDEX", (long) MDatabank::IS_VALUE_INDEX, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "MDatabank_INDEX_NUMBERS", (long) MDatabank::INDEX_NUMBERS, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "MDatabank_STORE_AS_META", (long) MDatabank::STORE_AS_META, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "MDatabank_STORE_IDL", (long) MDatabank::STORE_IDL, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "MDatabank_INDEX_STRING", (long) MDatabank::INDEX_STRING, 0, 0, 0},
{0,0,0,0,0,0}
};
#ifdef __cplusplus
}
#endif
static swig_variable_info swig_variables[] = {
    { "MRSc::gErrStr", MAGIC_CLASS _wrap_set_gErrStr, MAGIC_CLASS _wrap_val_gErrStr,&SWIGTYPE_p_std__string },
    { "MRSc::VERBOSE", MAGIC_CLASS _wrap_set_VERBOSE, MAGIC_CLASS _wrap_val_VERBOSE,0 },
    { "MRSc::THREADS", MAGIC_CLASS _wrap_set_THREADS, MAGIC_CLASS _wrap_val_THREADS,0 },
    { "MRSc::COMPRESSION", MAGIC_CLASS _wrap_set_COMPRESSION, MAGIC_CLASS _wrap_val_COMPRESSION,0 },
    { "MRSc::COMPRESSION_LEVEL", MAGIC_CLASS _wrap_set_COMPRESSION_LEVEL, MAGIC_CLASS _wrap_val_COMPRESSION_LEVEL,0 },
    { "MRSc::WEIGHT_BIT_COUNT", MAGIC_CLASS _wrap_set_WEIGHT_BIT_COUNT, MAGIC_CLASS _wrap_val_WEIGHT_BIT_COUNT,0 },
    { "MRSc::COMPRESSION_DICTIONARY", MAGIC_CLASS _wrap_set_COMPRESSION_DICTIONARY, MAGIC_CLASS _wrap_val_COMPRESSION_DICTIONARY,0 },
    { "MRSc::MDatabank_kWildCardString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_MDatabank_kWildCardString,0 },
{0,0,0,0}
};
static swig_command_info swig_commands[] = {
{"MRSc::errstr", _wrap_errstr},
{"MRSc::DUST", _wrap_DUST},
{"MRSc::SEG", _wrap_SEG},
{"MRSc::new_MStringIterator", _wrap_new_MStringIterator},
{"MRSc::MStringIterator_Next", _wrap_MStringIterator_Next},
{"MRSc::delete_MStringIterator", _wrap_delete_MStringIterator},
{"MRSc::new_MDatabank", _wrap_new_MDatabank},
{"MRSc::MDatabank_Create", _wrap_MDatabank_Create},
{"MRSc::MDatabank_Merge", _wrap_MDatabank_Merge},
{"MRSc::MDatabank_Count", _wrap_MDatabank_Count},
{"MRSc::MDatabank_GetCode", _wrap_MDatabank_GetCode},
{"MRSc::MDatabank_GetVersion", _wrap_MDatabank_GetVersion},
{"MRSc::MDatabank_GetUUID", _wrap_MDatabank_GetUUID},
{"MRSc::MDatabank_GetName", _wrap_MDatabank_GetName},
{"MRSc::MDatabank_GetInfoURL", _wrap_MDatabank_GetInfoURL},
{"MRSc::MDatabank_GetScriptName", _wrap_MDatabank_GetScriptName},
{"MRSc::MDatabank_GetSection", _wrap_MDatabank_GetSection},
{"MRSc::MDatabank_GetFilePath", _wrap_MDatabank_GetFilePath},
{"MRSc::MDatabank_IsUpToDate", _wrap_MDatabank_IsUpToDate},
{"MRSc::MDatabank_GetRawDataSize", _wrap_MDatabank_GetRawDataSize},
{"MRSc::MDatabank_DumpInfo", _wrap_MDatabank_DumpInfo},
{"MRSc::MDatabank_DumpIndex", _wrap_MDatabank_DumpIndex},
{"MRSc::MDatabank_PrefetchDocWeights", _wrap_MDatabank_PrefetchDocWeights},
{"MRSc::MDatabank_CountForKey", _wrap_MDatabank_CountForKey},
{"MRSc::MDatabank_Find", _wrap_MDatabank_Find},
{"MRSc::MDatabank_Match", _wrap_MDatabank_Match},
{"MRSc::MDatabank_MatchRel", _wrap_MDatabank_MatchRel},
{"MRSc::MDatabank_BooleanQuery", _wrap_MDatabank_BooleanQuery},
{"MRSc::MDatabank_RankedQuery", _wrap_MDatabank_RankedQuery},
{"MRSc::MDatabank_Get", _wrap_MDatabank_Get},
{"MRSc::MDatabank_GetMetaData", _wrap_MDatabank_GetMetaData},
{"MRSc::MDatabank_GetDescription", _wrap_MDatabank_GetDescription},
{"MRSc::MDatabank_ContainsBlastIndex", _wrap_MDatabank_ContainsBlastIndex},
{"MRSc::MDatabank_Sequence", _wrap_MDatabank_Sequence},
{"MRSc::MDatabank_Blast", _wrap_MDatabank_Blast},
{"MRSc::MDatabank_Index", _wrap_MDatabank_Index},
{"MRSc::MDatabank_Indices", _wrap_MDatabank_Indices},
{"MRSc::MDatabank_SuggestCorrection", _wrap_MDatabank_SuggestCorrection},
{"MRSc::MDatabank_StoreInfo", _wrap_MDatabank_StoreInfo},
{"MRSc::MDatabank_SetStopWords", _wrap_MDatabank_SetStopWords},
{"MRSc::MDatabank_SetXMLStyleSheetName", _wrap_MDatabank_SetXMLStyleSheetName},
{"MRSc::MDatabank_StoreMetaData", _wrap_MDatabank_StoreMetaData},
{"MRSc::MDatabank_Store", _wrap_MDatabank_Store},
{"MRSc::MDatabank_IndexText", _wrap_MDatabank_IndexText},
{"MRSc::MDatabank_IndexTextAndNumbers", _wrap_MDatabank_IndexTextAndNumbers},
{"MRSc::MDatabank_IndexWord", _wrap_MDatabank_IndexWord},
{"MRSc::MDatabank_IndexValue", _wrap_MDatabank_IndexValue},
{"MRSc::MDatabank_IndexWordWithWeight", _wrap_MDatabank_IndexWordWithWeight},
{"MRSc::MDatabank_IndexDate", _wrap_MDatabank_IndexDate},
{"MRSc::MDatabank_IndexNumber", _wrap_MDatabank_IndexNumber},
{"MRSc::MDatabank_AddSequence", _wrap_MDatabank_AddSequence},
{"MRSc::MDatabank_FlushDocument", _wrap_MDatabank_FlushDocument},
{"MRSc::MDatabank_AddXPathForIndex", _wrap_MDatabank_AddXPathForIndex},
{"MRSc::MDatabank_AddXMLDocument", _wrap_MDatabank_AddXMLDocument},
{"MRSc::MDatabank_Finish", _wrap_MDatabank_Finish},
{"MRSc::MDatabank_CreateDictionary", _wrap_MDatabank_CreateDictionary},
{"MRSc::delete_MDatabank", _wrap_delete_MDatabank},
{"MRSc::MBooleanQuery_Not", _wrap_MBooleanQuery_Not},
{"MRSc::MBooleanQuery_Union", _wrap_MBooleanQuery_Union},
{"MRSc::MBooleanQuery_Intersection", _wrap_MBooleanQuery_Intersection},
{"MRSc::MBooleanQuery_Perform", _wrap_MBooleanQuery_Perform},
{"MRSc::MBooleanQuery_Prefetch", _wrap_MBooleanQuery_Prefetch},
{"MRSc::new_MBooleanQuery", _wrap_new_MBooleanQuery},
{"MRSc::delete_MBooleanQuery", _wrap_delete_MBooleanQuery},
{"MRSc::MRankedQuery_AddTerm", _wrap_MRankedQuery_AddTerm},
{"MRSc::MRankedQuery_AddTermsFromText", _wrap_MRankedQuery_AddTermsFromText},
{"MRSc::MRankedQuery_SetAllTermsRequired", _wrap_MRankedQuery_SetAllTermsRequired},
{"MRSc::MRankedQuery_SetMaxReturn", _wrap_MRankedQuery_SetMaxReturn},
{"MRSc::MRankedQuery_SetAlgorithm", _wrap_MRankedQuery_SetAlgorithm},
{"MRSc::MRankedQuery_Perform", _wrap_MRankedQuery_Perform},
{"MRSc::new_MRankedQuery", _wrap_new_MRankedQuery},
{"MRSc::delete_MRankedQuery", _wrap_delete_MRankedQuery},
{"MRSc::MQueryResults_Next", _wrap_MQueryResults_Next},
{"MRSc::MQueryResults_Score", _wrap_MQueryResults_Score},
{"MRSc::MQueryResults_Skip", _wrap_MQueryResults_Skip},
{"MRSc::MQueryResults_Count", _wrap_MQueryResults_Count},
{"MRSc::MQueryResults_Blast", _wrap_MQueryResults_Blast},
{"MRSc::new_MQueryResults", _wrap_new_MQueryResults},
{"MRSc::delete_MQueryResults", _wrap_delete_MQueryResults},
{"MRSc::MKeys_Next", _wrap_MKeys_Next},
{"MRSc::MKeys_Skip", _wrap_MKeys_Skip},
{"MRSc::new_MKeys", _wrap_new_MKeys},
{"MRSc::delete_MKeys", _wrap_delete_MKeys},
{"MRSc::MIndex_Code", _wrap_MIndex_Code},
{"MRSc::MIndex_Type", _wrap_MIndex_Type},
{"MRSc::MIndex_Count", _wrap_MIndex_Count},
{"MRSc::MIndex_Keys", _wrap_MIndex_Keys},
{"MRSc::MIndex_FindKey", _wrap_MIndex_FindKey},
{"MRSc::MIndex_GetIDF", _wrap_MIndex_GetIDF},
{"MRSc::new_MIndex", _wrap_new_MIndex},
{"MRSc::delete_MIndex", _wrap_delete_MIndex},
{"MRSc::MIndices_Next", _wrap_MIndices_Next},
{"MRSc::new_MIndices", _wrap_new_MIndices},
{"MRSc::delete_MIndices", _wrap_delete_MIndices},
{"MRSc::MBlastHit_Id", _wrap_MBlastHit_Id},
{"MRSc::MBlastHit_Title", _wrap_MBlastHit_Title},
{"MRSc::MBlastHit_Hsps", _wrap_MBlastHit_Hsps},
{"MRSc::new_MBlastHit", _wrap_new_MBlastHit},
{"MRSc::delete_MBlastHit", _wrap_delete_MBlastHit},
{"MRSc::MBlastHits_DbCount", _wrap_MBlastHits_DbCount},
{"MRSc::MBlastHits_DbLength", _wrap_MBlastHits_DbLength},
{"MRSc::MBlastHits_EffectiveSpace", _wrap_MBlastHits_EffectiveSpace},
{"MRSc::MBlastHits_Kappa", _wrap_MBlastHits_Kappa},
{"MRSc::MBlastHits_Lambda", _wrap_MBlastHits_Lambda},
{"MRSc::MBlastHits_Entropy", _wrap_MBlastHits_Entropy},
{"MRSc::MBlastHits_Next", _wrap_MBlastHits_Next},
{"MRSc::new_MBlastHits", _wrap_new_MBlastHits},
{"MRSc::delete_MBlastHits", _wrap_delete_MBlastHits},
{"MRSc::MBlastHsp_Score", _wrap_MBlastHsp_Score},
{"MRSc::MBlastHsp_BitScore", _wrap_MBlastHsp_BitScore},
{"MRSc::MBlastHsp_Expect", _wrap_MBlastHsp_Expect},
{"MRSc::MBlastHsp_Identity", _wrap_MBlastHsp_Identity},
{"MRSc::MBlastHsp_Positive", _wrap_MBlastHsp_Positive},
{"MRSc::MBlastHsp_Gaps", _wrap_MBlastHsp_Gaps},
{"MRSc::MBlastHsp_QueryStart", _wrap_MBlastHsp_QueryStart},
{"MRSc::MBlastHsp_SubjectStart", _wrap_MBlastHsp_SubjectStart},
{"MRSc::MBlastHsp_SubjectLength", _wrap_MBlastHsp_SubjectLength},
{"MRSc::MBlastHsp_QueryAlignment", _wrap_MBlastHsp_QueryAlignment},
{"MRSc::MBlastHsp_SubjectAlignment", _wrap_MBlastHsp_SubjectAlignment},
{"MRSc::MBlastHsp_Midline", _wrap_MBlastHsp_Midline},
{"MRSc::new_MBlastHsp", _wrap_new_MBlastHsp},
{"MRSc::delete_MBlastHsp", _wrap_delete_MBlastHsp},
{"MRSc::MBlastHsps_Next", _wrap_MBlastHsps_Next},
{"MRSc::new_MBlastHsps", _wrap_new_MBlastHsps},
{"MRSc::delete_MBlastHsps", _wrap_delete_MBlastHsps},
{0,0}
};
/*************************************************************************
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.

 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop though that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.

 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
**/

#ifdef __cplusplus
extern "C" {
#endif
    
    SWIGRUNTIME void
    SWIG_InitializeModule(void *clientdata) {
        swig_type_info *type, *ret;
        swig_cast_info *cast;
        size_t i;
        swig_module_info *module_head;
        static int init_run = 0;
        
        clientdata = clientdata;
        
        if (init_run) return;
        init_run = 1;
        
        /* Initialize the swig_module */
        swig_module.type_initial = swig_type_initial;
        swig_module.cast_initial = swig_cast_initial;
        
        /* Try and load any already created modules */
        module_head = SWIG_GetModule(clientdata);
        if (module_head) {
            swig_module.next = module_head->next;
            module_head->next = &swig_module;
        } else {
            /* This is the first module loaded */
            swig_module.next = &swig_module;
            SWIG_SetModule(clientdata, &swig_module);
        }
        
        /* Now work on filling in swig_module.types */
        for (i = 0; i < swig_module.size; ++i) {
            type = 0;
            
            /* if there is another module already loaded */
            if (swig_module.next != &swig_module) {
                type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
            }
            if (type) {
                /* Overwrite clientdata field */
                if (swig_module.type_initial[i]->clientdata) type->clientdata = swig_module.type_initial[i]->clientdata;
            } else {
                type = swig_module.type_initial[i];
            }
            
            /* Insert casting types */
            cast = swig_module.cast_initial[i];
            while (cast->type) {
                /* Don't need to add information already in the list */
                ret = 0;
                if (swig_module.next != &swig_module) {
                    ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
                }
                if (ret && type == swig_module.type_initial[i]) {
                    cast->type = ret;
                    ret = 0;
                }
                
                if (!ret) {
                    if (type->cast) {
                        type->cast->prev = cast;
                        cast->next = type->cast;
                    }
                    type->cast = cast;
                }
                
                cast++;
            }
            
            /* Set entry in modules->types array equal to the type */
            swig_module.types[i] = type;
        }
        swig_module.types[i] = 0;
    }
    
    /* This function will propagate the clientdata field of type to
    * any new swig_type_info structures that have been added into the list
    * of equivalent types.  It is like calling
    * SWIG_TypeClientData(type, clientdata) a second time.
    */
    SWIGRUNTIME void
    SWIG_PropagateClientData(void) {
        size_t i;
        swig_cast_info *equiv;
        static int init_run = 0;
        
        if (init_run) return;
        init_run = 1;
        
        for (i = 0; i < swig_module.size; i++) {
            if (swig_module.types[i]->clientdata) {
                equiv = swig_module.types[i]->cast;
                while (equiv) {
                    if (!equiv->converter) {
                        if (equiv->type && !equiv->type->clientdata)
                        SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
                    }
                    equiv = equiv->next;
                }
            }
        }
    }
    
#ifdef __cplusplus
}
#endif



#ifdef __cplusplus
extern "C"
#endif

XS(SWIG_init) {
    dXSARGS;
    int i;
    
    SWIG_InitializeModule(0);
    
    /* Install commands */
    for (i = 0; swig_commands[i].name; i++) {
        newXS((char*) swig_commands[i].name,swig_commands[i].wrapper, (char*)__FILE__);
    }
    
    /* Install variables */
    for (i = 0; swig_variables[i].name; i++) {
        SV *sv;
        sv = perl_get_sv((char*) swig_variables[i].name, TRUE | 0x2);
        if (swig_variables[i].type) {
            SWIG_MakePtr(sv,(void *)1, *swig_variables[i].type,0);
        } else {
            sv_setiv(sv,(IV) 0);
        }
        swig_create_magic(sv, (char *) swig_variables[i].name, swig_variables[i].set, swig_variables[i].get); 
    }
    
    /* Install constant */
    for (i = 0; swig_constants[i].type; i++) {
        SV *sv;
        sv = perl_get_sv((char*)swig_constants[i].name, TRUE | 0x2);
        switch(swig_constants[i].type) {
            case SWIG_INT:
            sv_setiv(sv, (IV) swig_constants[i].lvalue);
            break;
            case SWIG_FLOAT:
            sv_setnv(sv, (double) swig_constants[i].dvalue);
            break;
            case SWIG_STRING:
            sv_setpv(sv, (char *) swig_constants[i].pvalue);
            break;
            case SWIG_POINTER:
            SWIG_MakePtr(sv, swig_constants[i].pvalue, *(swig_constants[i].ptype),0);
            break;
            case SWIG_BINARY:
            SWIG_MakePackedObj(sv, swig_constants[i].pvalue, swig_constants[i].lvalue, *(swig_constants[i].ptype));
            break;
            default:
            break;
        }
        SvREADONLY_on(sv);
    }
    
    SWIG_TypeClientData(SWIGTYPE_p_MStringIterator, (void*) "MRS::MStringIterator");
    SWIG_TypeClientData(SWIGTYPE_p_MDatabank, (void*) "MRS::MDatabank");
    SWIG_TypeClientData(SWIGTYPE_p_MBooleanQuery, (void*) "MRS::MBooleanQuery");
    SWIG_TypeClientData(SWIGTYPE_p_MRankedQuery, (void*) "MRS::MRankedQuery");
    SWIG_TypeClientData(SWIGTYPE_p_MQueryResults, (void*) "MRS::MQueryResults");
    SWIG_TypeClientData(SWIGTYPE_p_MKeys, (void*) "MRS::MKeys");
    SWIG_TypeClientData(SWIGTYPE_p_MIndex, (void*) "MRS::MIndex");
    SWIG_TypeClientData(SWIGTYPE_p_MIndices, (void*) "MRS::MIndices");
    SWIG_TypeClientData(SWIGTYPE_p_MBlastHit, (void*) "MRS::MBlastHit");
    SWIG_TypeClientData(SWIGTYPE_p_MBlastHits, (void*) "MRS::MBlastHits");
    SWIG_TypeClientData(SWIGTYPE_p_MBlastHsp, (void*) "MRS::MBlastHsp");
    SWIG_TypeClientData(SWIGTYPE_p_MBlastHsps, (void*) "MRS::MBlastHsps");
    ST(0) = &PL_sv_yes;
    XSRETURN(1);
}

