/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.22
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};                                                    
#endif

/*************************************************************** -*- c -*-
 * perl5/precommon.swg
 *
 * Rename all exported symbols from common.swg, to avoid symbol
 * clashes if multiple interpreters are included
 *
 ************************************************************************/

#define SWIG_TypeRegister    SWIG_Perl_TypeRegister
#define SWIG_TypeCheck       SWIG_Perl_TypeCheck
#define SWIG_TypeCast        SWIG_Perl_TypeCast
#define SWIG_TypeDynamicCast SWIG_Perl_TypeDynamicCast
#define SWIG_TypeName        SWIG_Perl_TypeName
#define SWIG_TypePrettyName  SWIG_Perl_TypePrettyName
#define SWIG_TypeQuery       SWIG_Perl_TypeQuery
#define SWIG_TypeClientData  SWIG_Perl_TypeClientData
#define SWIG_PackData        SWIG_Perl_PackData 
#define SWIG_UnpackData      SWIG_Perl_UnpackData 


/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  if defined(_MSC_VER) || defined(__GNUC__)
#    if defined(STATIC_LINKED)
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) extern a
#    else
#      define SWIGEXPORT(a) __declspec(dllexport) a
#      define SWIGIMPORT(a) extern a
#    endif
#  else
#    if defined(__BORLANDC__)
#      define SWIGEXPORT(a) a _export
#      define SWIGIMPORT(a) a _export
#    else
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) a
#    endif
#  endif
#else
#  define SWIGEXPORT(a) a
#  define SWIGIMPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#  define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#  define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGIMPORT(void *)           SWIG_TypeCast(swig_type_info *, void *);
SWIGIMPORT(swig_type_info *) SWIG_TypeDynamicCast(swig_type_info *, void **);
SWIGIMPORT(const char *)     SWIG_TypeName(const swig_type_info *);
SWIGIMPORT(const char *)     SWIG_TypePrettyName(const swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeQuery(const char *);
SWIGIMPORT(void)             SWIG_TypeClientData(swig_type_info *, void *);
SWIGIMPORT(char *)           SWIG_PackData(char *, void *, int);
SWIGIMPORT(char *)           SWIG_UnpackData(char *, void *, int);

#else

static swig_type_info *swig_type_list = 0;
static swig_type_info **swig_type_list_handle = &swig_type_list;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti) {
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = *swig_type_list_handle;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      if (tc->clientdata) ti->clientdata = tc->clientdata;
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = *swig_type_list_handle;
  *swig_type_list_handle = ti;

  /* Build linked lists */
  l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty) {
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
        s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Cast a pointer up an inheritance hierarchy */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) {
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Dynamic pointer casting. Down an inheritance hierarchy */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/* Return the name associated with this type */
SWIGRUNTIME(const char *)
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/* Return the pretty name associated with this type,
   that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME(const char *)
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Compare two type names skipping the space characters, therefore
   "char*" == "char *" and "Class<int>" == "Class<int >", etc.

   Return 0 when the two name types are equivalent, as in
   strncmp, but skipping ' '.
*/
static int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return *f1 - *f2;
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
*/
static int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te) == 0;
    if (*ne) ++ne;
  }
  return equiv;
}
  

/* Search for a swig_type_info structure */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = *swig_type_list_handle;
  while (ty) {
    if (ty->str && (SWIG_TypeEquiv(ty->str,name))) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* Set the clientdata field for a type */
SWIGRUNTIME(void)
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata == clientdata) return;
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = *swig_type_list_handle;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0))
          SWIG_TypeClientData(tc,clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* Pack binary data into a string */
SWIGRUNTIME(char *)
SWIG_PackData(char *c, void *ptr, int sz) {
  static char hex[17] = "0123456789abcdef";
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  register unsigned char uu;
  for (; u != eu; ++u) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* Unpack binary data from a string */
SWIGRUNTIME(char *)
SWIG_UnpackData(char *c, void *ptr, int sz) {
  register unsigned char uu = 0;
  register int d;
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    *u = uu;
  }
  return c;
}

#endif

#ifdef __cplusplus
}
#endif

/* ---------------------------------------------------------------------- -*- c -*-
 * perl5.swg
 *
 * Perl5 runtime library
 * $Header: /usr/cvsroot/mrs/Sources/MRS_swig_perl5_wrap.cxx,v 1.1 2005/11/02 09:02:26 maarten Exp $
 * ----------------------------------------------------------------------------- */

#define SWIGPERL
#define SWIGPERL5
#ifdef __cplusplus
/* Needed on some windows machines---since MS plays funny games with the header files under C++ */
#include <math.h>
#include <stdlib.h>
extern "C" {
#endif
#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

/* Get rid of free and malloc defined by perl */
#undef free
#undef malloc

#ifndef pTHX_
#define pTHX_
#endif

#include <string.h>
#ifdef __cplusplus
}
#endif

/* Macro to call an XS function */

#ifdef PERL_OBJECT 
#  define SWIG_CALLXS(_name) _name(cv,pPerl) 
#else 
#  ifndef MULTIPLICITY 
#    define SWIG_CALLXS(_name) _name(cv) 
#  else 
#    define SWIG_CALLXS(_name) _name(PERL_GET_THX, cv) 
#  endif 
#endif 

/* Contract support */

#define SWIG_contract_assert(expr,msg) if (!(expr)) { SWIG_croak(msg); } else

/* Note: SwigMagicFuncHack is a typedef used to get the C++ compiler to just shut up already */

#ifdef PERL_OBJECT
#define MAGIC_PPERL  CPerlObj *pPerl = (CPerlObj *) this;
typedef int (CPerlObj::*SwigMagicFunc)(SV *, MAGIC *);

#ifdef __cplusplus
extern "C" {
#endif
typedef int (CPerlObj::*SwigMagicFuncHack)(SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#define SWIG_MAGIC(a,b) (SV *a, MAGIC *b)
#define SWIGCLASS_STATIC
#else
#define MAGIC_PPERL
#define SWIGCLASS_STATIC static
#ifndef MULTIPLICITY
#define SWIG_MAGIC(a,b) (SV *a, MAGIC *b)
typedef int (*SwigMagicFunc)(SV *, MAGIC *);

#ifdef __cplusplus
extern "C" {
#endif
typedef int (*SwigMagicFuncHack)(SV *, MAGIC *);
#ifdef __cplusplus
}
#endif


#else
#define SWIG_MAGIC(a,b) (struct interpreter *interp, SV *a, MAGIC *b)
typedef int (*SwigMagicFunc)(struct interpreter *, SV *, MAGIC *);
#ifdef __cplusplus
extern "C" {
#endif
typedef int (*SwigMagicFuncHack)(struct interpreter *, SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#endif
#endif

#if defined(WIN32) && defined(PERL_OBJECT) && !defined(PerlIO_exportFILE)
#define PerlIO_exportFILE(fh,fl) (FILE*)(fh)
#endif

/* Modifications for newer Perl 5.005 releases */

#if !defined(PERL_REVISION) || ((PERL_REVISION >= 5) && ((PERL_VERSION < 5) || ((PERL_VERSION == 5) && (PERL_SUBVERSION < 50))))
#  ifndef PL_sv_yes
#    define PL_sv_yes sv_yes
#  endif
#  ifndef PL_sv_undef
#    define PL_sv_undef sv_undef
#  endif
#  ifndef PL_na
#    define PL_na na
#  endif
#endif

#include <stdlib.h>

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_OWNER 1
#define SWIG_SHADOW 2

/* Common SWIG API */

#ifdef PERL_OBJECT
#  define SWIG_ConvertPtr(obj, pp, type, flags) \
     SWIG_Perl_ConvertPtr(pPerl, obj, pp, type, flags)
#  define SWIG_NewPointerObj(p, type, flags) \
     SWIG_Perl_NewPointerObj(pPerl, p, type, flags)
#  define SWIG_MakePackedObj(sv, p, s, type)	\
     SWIG_Perl_MakePackedObj(pPerl, sv, p, s, type)
#  define SWIG_ConvertPacked(obj, p, s, type, flags) \
     SWIG_Perl_ConvertPacked(pPerl, obj, p, s, type, flags)

#else
#  define SWIG_ConvertPtr(obj, pp, type, flags) \
     SWIG_Perl_ConvertPtr(obj, pp, type, flags)
#  define SWIG_NewPointerObj(p, type, flags) \
     SWIG_Perl_NewPointerObj(p, type, flags)
#  define SWIG_MakePackedObj(sv, p, s, type)	\
     SWIG_Perl_MakePackedObj(sv, p, s, type )
#  define SWIG_ConvertPacked(obj, p, s, type, flags) \
     SWIG_Perl_ConvertPacked(obj, p, s, type, flags)
#endif

/* Perl-specific API */
#ifdef PERL_OBJECT
#  define SWIG_MakePtr(sv, ptr, type, flags) \
     SWIG_Perl_MakePtr(pPerl, sv, ptr, type, flags)
#  define SWIG_TypeCheckRV(rv, ty) \
     SWIG_Perl_TypeCheckRV(pPerl, rv, ty)
#  define SWIG_SetError(str) \
     SWIG_Perl_SetError(pPerl, str)
#else
#  define SWIG_MakePtr(sv, ptr, type, flags) \
     SWIG_Perl_MakePtr(sv, ptr, type, flags)
#  define SWIG_TypeCheckRV(rv, ty) \
     SWIG_Perl_TypeCheckRV(rv, ty)
#  define SWIG_SetError(str) \
     SWIG_Perl_SetError(str)
#  define SWIG_SetErrorSV(str) \
     SWIG_Perl_SetErrorSV(str)
#endif

#define SWIG_SetErrorf SWIG_Perl_SetErrorf


#ifdef PERL_OBJECT
#  define SWIG_MAYBE_PERL_OBJECT CPerlObj *pPerl,
#else
#  define SWIG_MAYBE_PERL_OBJECT
#endif

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(int)               SWIG_Perl_ConvertPtr(SWIG_MAYBE_PERL_OBJECT SV *, void **, swig_type_info *, int flags);
SWIGIMPORT(void)              SWIG_Perl_MakePtr(SWIG_MAYBE_PERL_OBJECT SV *, void *, swig_type_info *, int flags);
SWIGIMPORT(SV *)              SWIG_Perl_NewPointerObj(SWIG_MAYBE_PERL_OBJECT void *, swig_type_info *, int flags);
SWIGIMPORT(void)              SWIG_Perl_MakePackedObj(SWIG_MAYBE_PERL_OBJECT SV *, void *, int, swig_type_info *);
SWIGIMPORT(int)               SWIG_Perl_ConvertPacked(SWIG_MAYBE_PERL_OBJECT SV *, void *, int, swig_type_info *, int flags);
SWIGIMPORT(swig_type_info *)  SWIG_Perl_TypeCheckRV(SWIG_MAYBE_PERL_OBJECT SV *rv, swig_type_info *ty);
SWIGIMPORT(SV *)              SWIG_Perl_SetError(SWIG_MAYBE_PERL_OBJECT char *);

#else

SWIGRUNTIME(swig_type_info *)
SWIG_Perl_TypeCheckRV(SWIG_MAYBE_PERL_OBJECT SV *rv, swig_type_info *ty) {
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (sv_derived_from(rv, (char *) s->name)) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
        s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Function for getting a pointer value */

SWIGRUNTIME(int) 
SWIG_Perl_ConvertPtr(SWIG_MAYBE_PERL_OBJECT SV *sv, void **ptr, swig_type_info *_t, int flags) {
  swig_type_info *tc;
  void *voidptr = (void *)0;

  /* If magical, apply more magic */
  if (SvGMAGICAL(sv))
    mg_get(sv);

  /* Check to see if this is an object */
  if (sv_isobject(sv)) {
    SV *tsv = (SV*) SvRV(sv);
    IV tmp = 0;
    if ((SvTYPE(tsv) == SVt_PVHV)) {
      MAGIC *mg;
      if (SvMAGICAL(tsv)) {
        mg = mg_find(tsv,'P');
        if (mg) {
          SV *rsv = mg->mg_obj;
          if (sv_isobject(rsv)) {
            tmp = SvIV((SV*)SvRV(rsv));
          }
        }
      } else {
        return -1;
      }
    } else {
      tmp = SvIV((SV*)SvRV(sv));
    }
    voidptr = (void *)tmp;
    if (!_t) {
      *(ptr) = voidptr;
      return 0;
    }
  } else if (! SvOK(sv)) {            /* Check for undef */
    *(ptr) = (void *) 0;
    return 0;
  } else if (SvTYPE(sv) == SVt_RV) {  /* Check for NULL pointer */
    *(ptr) = (void *) 0;
    if (!SvROK(sv))
      return 0;
    else
      return -1;
  } else {                            /* Don't know what it is */
    *(ptr) = (void *) 0;
    return -1;
  }
  if (_t) {
    /* Now see if the types match */
    tc = SWIG_TypeCheckRV(sv,_t);
    if (!tc) {
      *ptr = voidptr;
      return -1;
    }
    *ptr = SWIG_TypeCast(tc,voidptr);
    return 0;
  }
  *ptr = voidptr;
  return 0;
}

SWIGRUNTIME(void)
SWIG_Perl_MakePtr(SWIG_MAYBE_PERL_OBJECT SV *sv, void *ptr, swig_type_info *t, int flags) {
  if (ptr && (flags & SWIG_SHADOW)) {
    SV *self;
    SV *obj=newSV(0);
    HV *hash=newHV();
    HV *stash;
    sv_setref_pv(obj, (char *) t->name, ptr);
    stash=SvSTASH(SvRV(obj));
    if (flags & SWIG_OWNER) {
      HV *hv;
      GV *gv=*(GV**)hv_fetch(stash, "OWNER", 5, TRUE);
      if (!isGV(gv))
        gv_init(gv, stash, "OWNER", 5, FALSE);
      hv=GvHVn(gv);
      hv_store_ent(hv, obj, newSViv(1), 0);
    }
    sv_magic((SV *)hash, (SV *)obj, 'P', Nullch, 0);
    SvREFCNT_dec(obj);
    self=newRV_noinc((SV *)hash);
    sv_setsv(sv, self);
    SvREFCNT_dec((SV *)self);
    sv_bless(sv, stash);
  }
  else {
    sv_setref_pv(sv, (char *) t->name, ptr);
  }
}

SWIGRUNTIME(SV *)
SWIG_Perl_NewPointerObj(SWIG_MAYBE_PERL_OBJECT void *ptr, swig_type_info *t, int flags) {
  SV *result = sv_newmortal();
  SWIG_MakePtr(result, ptr, t, flags);
  return result;
}

SWIGRUNTIME(void)
  SWIG_Perl_MakePackedObj(SWIG_MAYBE_PERL_OBJECT SV *sv, void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  sv_setpv(sv, result);
}

/* Convert a packed value value */
SWIGRUNTIME(int)
SWIG_Perl_ConvertPacked(SWIG_MAYBE_PERL_OBJECT SV *obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c = 0;

  if ((!obj) || (!SvOK(obj))) return -1;
  c = SvPV(obj, PL_na);
  /* Pointer values must start with leading underscore */
  if (*c != '_') return -1;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) return -1;
  }
  return 0;
}

SWIGRUNTIME(void)
SWIG_Perl_SetError(SWIG_MAYBE_PERL_OBJECT const char *error) {
  if (error) sv_setpv(perl_get_sv("@", TRUE), error);
}

SWIGRUNTIME(void)
SWIG_Perl_SetErrorSV(SWIG_MAYBE_PERL_OBJECT SV *error) {
  if (error) sv_setsv(perl_get_sv("@", TRUE), error);
}

SWIGRUNTIME(void)
SWIG_Perl_SetErrorf(const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  sv_vsetpvfn(perl_get_sv("@", TRUE), fmt, strlen(fmt), &args, Null(SV**), 0, Null(bool*));
  va_end(args);
}

#endif

/* Macros for low-level exception handling */
#define SWIG_fail       goto fail
#define SWIG_croak(x)   { SWIG_SetError(x); goto fail; }
#define SWIG_croakSV(x) { SWIG_SetErrorSV(x); goto fail; }
/* most preprocessors do not support vararg macros :-( */
/* #define SWIG_croakf(x...) { SWIG_SetErrorf(x); goto fail; } */


typedef XS(SwigPerlWrapper);
typedef SwigPerlWrapper *SwigPerlWrapperPtr;

/* Structure for command table */
typedef struct {
  const char         *name;
  SwigPerlWrapperPtr  wrapper;
} swig_command_info;

/* Information for constant table */

#define SWIG_INT     1
#define SWIG_FLOAT   2
#define SWIG_STRING  3
#define SWIG_POINTER 4
#define SWIG_BINARY  5

/* Constant information structure */
typedef struct swig_constant_info {
    int              type;
    const char      *name;
    long             lvalue;
    double           dvalue;
    void            *pvalue;
    swig_type_info **ptype;
} swig_constant_info;

#ifdef __cplusplus
}
#endif

/* Structure for variable table */
typedef struct {
  const char   *name;
  SwigMagicFunc   set;
  SwigMagicFunc   get;
  swig_type_info  **type;
} swig_variable_info;

/* Magic variable code */
#ifndef PERL_OBJECT
#define swig_create_magic(s,a,b,c) _swig_create_magic(s,a,b,c)
  #ifndef MULTIPLICITY
     static void _swig_create_magic(SV *sv, char *name, int (*set)(SV *, MAGIC *), int (*get)(SV *,MAGIC *)) {
  #else
     static void _swig_create_magic(SV *sv, char *name, int (*set)(struct interpreter*, SV *, MAGIC *), int (*get)(struct interpreter*, SV *,MAGIC *)) {
  #endif
#else
#  define swig_create_magic(s,a,b,c) _swig_create_magic(pPerl,s,a,b,c)
static void _swig_create_magic(CPerlObj *pPerl, SV *sv, const char *name, int (CPerlObj::*set)(SV *, MAGIC *), int (CPerlObj::*get)(SV *, MAGIC *)) {
#endif
  MAGIC *mg;
  sv_magic(sv,sv,'U',(char *) name,strlen(name));
  mg = mg_find(sv,'U');
  mg->mg_virtual = (MGVTBL *) malloc(sizeof(MGVTBL));
  mg->mg_virtual->svt_get = (SwigMagicFuncHack) get;
  mg->mg_virtual->svt_set = (SwigMagicFuncHack) set;
  mg->mg_virtual->svt_len = 0;
  mg->mg_virtual->svt_clear = 0;
  mg->mg_virtual->svt_free = 0;
}






#ifdef do_open
  #undef do_open
#endif
#ifdef do_close
  #undef do_close
#endif
#ifdef scalar
  #undef scalar
#endif
#ifdef list
  #undef list
#endif
#ifdef apply
  #undef apply
#endif
#ifdef convert
  #undef convert
#endif
#ifdef Error
  #undef Error
#endif
#ifdef form
  #undef form
#endif
#ifdef vform
  #undef vform
#endif
#ifdef LABEL
  #undef LABEL
#endif
#ifdef METHOD
  #undef METHOD
#endif
#ifdef Move
  #undef Move
#endif
#ifdef yylex
  #undef yylex
#endif
#ifdef yyparse
  #undef yyparse
#endif
#ifdef yyerror
  #undef yyerror
#endif
#ifdef invert
  #undef invert
#endif
#ifdef ref
  #undef ref
#endif
#ifdef ENTER
  #undef ENTER
#endif


/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_MDatabank swig_types[0] 
#define  SWIGTYPE_p_MDatabankArray swig_types[1] 
#define  SWIGTYPE_p_MKeys swig_types[2] 
#define  SWIGTYPE_p_MBlastHsp swig_types[3] 
#define  SWIGTYPE_p_std__vectorTstd__string_t swig_types[4] 
#define  SWIGTYPE_p_MBlastHsps swig_types[5] 
#define  SWIGTYPE_p_MStringIterator swig_types[6] 
#define  SWIGTYPE_p_std__string swig_types[7] 
#define  SWIGTYPE_p_MQueryResults swig_types[8] 
#define  SWIGTYPE_p_MIndices swig_types[9] 
#define  SWIGTYPE_p_MBlastHits swig_types[10] 
#define  SWIGTYPE_p_MIndex swig_types[11] 
#define  SWIGTYPE_p_MBlastHit swig_types[12] 
static swig_type_info *swig_types[14];

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    boot_MRS

#define SWIG_name   "MRSc::boot_MRS"
#define SWIG_prefix "MRSc::"

#ifdef __cplusplus
extern "C"
#endif
#ifndef PERL_OBJECT
#ifndef MULTIPLICITY
SWIGEXPORT(void) SWIG_init (CV* cv);
#else
SWIGEXPORT(void) SWIG_init (pTHXo_ CV* cv);
#endif
#else
SWIGEXPORT(void) SWIG_init (CV *cv, CPerlObj *);
#endif


#define  SWIG_MemoryError    1
#define  SWIG_IOError        2
#define  SWIG_RuntimeError   3
#define  SWIG_IndexError     4
#define  SWIG_TypeError      5
#define  SWIG_DivisionByZero 6
#define  SWIG_OverflowError  7
#define  SWIG_SyntaxError    8
#define  SWIG_ValueError     9
#define  SWIG_SystemError   10
#define  SWIG_UnknownError  99


#define SWIG_exception(a,b)   SWIG_croak(b)


#include <stdexcept>


#include <string>


#include <vector>
#include <iostream>
using namespace std;


class MDatabank;
typedef std::vector<MDatabank*> MDatabankArray;

extern std::string gErrStr;

#include "MRS_swig.h"

extern int VERBOSE;
extern int THREADS;
extern char const *COMPRESSION;
extern int COMPRESSION_LEVEL;
extern char const *COMPRESSION_DICTIONARY;
#ifdef PERL_OBJECT
#define MAGIC_CLASS _wrap_MRS_var::
class _wrap_MRS_var : public CPerlObj {
public:
#else
#define MAGIC_CLASS
#endif
SWIGCLASS_STATIC int swig_magic_readonly(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    sv = sv; mg = mg;
    croak("Value is read-only.");
    return 0;
}
SWIGCLASS_STATIC int _wrap_set_gErrStr(pTHX_ SV* sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        std::string * argp;
        if (SWIG_ConvertPtr(sv,(void **) &argp, SWIGTYPE_p_std__string,0) < 0) {
            croak("Type error in argument $argnum of gErrStr. Expected _p_std__string");
        }
        gErrStr = *argp;
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_gErrStr(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    sv_setiv(SvRV(sv), (IV) &gErrStr);
    return 1;
}


SWIGCLASS_STATIC int _wrap_set_VERBOSE(pTHX_ SV* sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    VERBOSE = (int) SvIV(sv);
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_VERBOSE(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    sv_setiv(sv, (IV) VERBOSE);
    return 1;
}


SWIGCLASS_STATIC int _wrap_set_THREADS(pTHX_ SV* sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    THREADS = (int) SvIV(sv);
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_THREADS(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    sv_setiv(sv, (IV) THREADS);
    return 1;
}


SWIGCLASS_STATIC int _wrap_set_COMPRESSION(pTHX_ SV* sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        char *_a = (char *) SvPV(sv,PL_na);
        COMPRESSION = new char[strlen(_a)+1];
        strcpy((char *)COMPRESSION,_a);
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_COMPRESSION(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    if (COMPRESSION) {
        sv_setpv((SV*)sv, (char *) COMPRESSION);
    } else {
        sv_setsv((SV*)sv, &PL_sv_undef);
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_set_COMPRESSION_LEVEL(pTHX_ SV* sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    COMPRESSION_LEVEL = (int) SvIV(sv);
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_COMPRESSION_LEVEL(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    sv_setiv(sv, (IV) COMPRESSION_LEVEL);
    return 1;
}


SWIGCLASS_STATIC int _wrap_set_COMPRESSION_DICTIONARY(pTHX_ SV* sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        char *_a = (char *) SvPV(sv,PL_na);
        COMPRESSION_DICTIONARY = new char[strlen(_a)+1];
        strcpy((char *)COMPRESSION_DICTIONARY,_a);
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_COMPRESSION_DICTIONARY(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    if (COMPRESSION_DICTIONARY) {
        sv_setpv((SV*)sv, (char *) COMPRESSION_DICTIONARY);
    } else {
        sv_setsv((SV*)sv, &PL_sv_undef);
    }
    return 1;
}




#ifdef PERL_OBJECT
};
#endif

#ifdef __cplusplus
extern "C" {
#endif
XS(_wrap_errstr) {
    {
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: errstr();");
        }
        {
            try {
                result = errstr();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DUST) {
    {
        std::string *arg1 = 0 ;
        std::string result;
        std::string temp1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DUST(inSequence);");
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(0), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 1 of DUST.");
            } else {
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            try {
                result = DUST((std::string const &)*arg1);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SEG) {
    {
        std::string *arg1 = 0 ;
        std::string result;
        std::string temp1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SEG(inSequence);");
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(0), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 1 of SEG.");
            } else {
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            try {
                result = SEG((std::string const &)*arg1);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_MStringIterator) {
    {
        std::vector<std::string > *arg1 = 0 ;
        MStringIterator *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_MStringIterator(inStrings);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__vectorTstd__string_t,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_MStringIterator. Expected _p_std__vectorTstd__string_t");
            }
        }
        {
            try {
                result = (MStringIterator *)new MStringIterator(*arg1);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MStringIterator, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MStringIterator_Next) {
    {
        MStringIterator *arg1 = (MStringIterator *) 0 ;
        char *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MStringIterator_Next(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MStringIterator,0) < 0) {
                SWIG_croak("Type error in argument 1 of MStringIterator_Next. Expected _p_MStringIterator");
            }
        }
        {
            try {
                result = (char *)(arg1)->Next();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        if (result) {
            sv_setpv((SV*)ST(argvi++), (char *) result);
        } else {
            sv_setsv((SV*)ST(argvi++), &PL_sv_undef);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_MStringIterator) {
    {
        MStringIterator *arg1 = (MStringIterator *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_MStringIterator(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MStringIterator,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_MStringIterator. Expected _p_MStringIterator");
            }
        }
        {
            try {
                delete arg1;
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_MDatabank) {
    {
        std::string *arg1 = 0 ;
        MDatabank *result;
        std::string temp1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_MDatabank(inName);");
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(0), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 1 of new_MDatabank.");
            } else {
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            try {
                result = (MDatabank *)new MDatabank((std::string const &)*arg1);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MDatabank, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_Create) {
    {
        std::string *arg1 = 0 ;
        MDatabank *result;
        std::string temp1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MDatabank_Create(inPath);");
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(0), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 1 of MDatabank_Create.");
            } else {
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            try {
                result = (MDatabank *)MDatabank::Create((std::string const &)*arg1);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MDatabank, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_Merge) {
    {
        std::string *arg1 = 0 ;
        SwigValueWrapper< MDatabankArray > arg2 ;
        std::string temp1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MDatabank_Merge(inPath,inDbs);");
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(0), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 1 of MDatabank_Merge.");
            } else {
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            if (!SvROK(ST(1)))
            croak("Argument 2 is not a reference.");
            
            AV* av = (AV*)SvRV(ST(1));
            
            if (SvTYPE(av) != SVt_PVAV)
            croak("ST(1) is not an array.");
            
            I32 len = av_len(av) + 1;
            swig_type_info* ti = SWIG_TypeQuery("MDatabank");
            
            MDatabankArray a;
            
            for (int i = 0; i < len; ++i)
            {
                SV** tv = av_fetch(av, i, 0);
                
                MDatabank* obj;
                
                if (SWIG_ConvertPtr(*tv, (void **)&obj, ti, 0) != -1)
                a.push_back(obj);
                else
                SWIG_croak("Type error in argument 2 of MDatabank::Merge. Expected an array of MDatabank objects.");
            }
            
            arg2 = a;
        }
        {
            try {
                MDatabank::Merge((std::string const &)*arg1,arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_Count) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        long result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MDatabank_Count(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_Count. Expected _p_MDatabank");
            }
        }
        {
            try {
                result = (long)(arg1)->Count();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_GetVersion) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MDatabank_GetVersion(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_GetVersion. Expected _p_MDatabank");
            }
        }
        {
            try {
                result = (arg1)->GetVersion();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_DumpInfo) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MDatabank_DumpInfo(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_DumpInfo. Expected _p_MDatabank");
            }
        }
        {
            try {
                (arg1)->DumpInfo();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_CountForKey) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        std::string *arg3 = 0 ;
        long result;
        std::string temp2 ;
        std::string temp3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: MDatabank_CountForKey(self,inIndex,inKey);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_CountForKey. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_CountForKey.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(2), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 3 of MDatabank_CountForKey.");
            } else {
                temp3.assign(ptr, len);
                arg3 = &temp3;
            }
        }
        {
            try {
                result = (long)((MDatabank const *)arg1)->CountForKey((std::string const &)*arg2,(std::string const &)*arg3);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_Find) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        bool arg3 = (bool) true ;
        MQueryResults *result;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 3)) {
            SWIG_croak("Usage: MDatabank_Find(self,inQuery,inAutoWildcard);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_Find. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_Find.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        if (items > 2) {
            arg3 = (bool) SvIV(ST(2));
        }
        {
            try {
                result = (MQueryResults *)(arg1)->Find((std::string const &)*arg2,arg3);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MQueryResults, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_Get) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        char *result;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MDatabank_Get(self,inEntryID);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_Get. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_Get.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                result = (char *)(arg1)->Get((std::string const &)*arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        if (result) {
            sv_setpv((SV*)ST(argvi++), (char *) result);
        } else {
            sv_setsv((SV*)ST(argvi++), &PL_sv_undef);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_Sequence) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        unsigned long arg3 = (unsigned long) 0 ;
        char *result;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 3)) {
            SWIG_croak("Usage: MDatabank_Sequence(self,inEntryID,inIndex);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_Sequence. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_Sequence.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        if (items > 2) {
            arg3 = (unsigned long) SvUV(ST(2));
        }
        {
            try {
                result = (char *)(arg1)->Sequence((std::string const &)*arg2,arg3);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        if (result) {
            sv_setpv((SV*)ST(argvi++), (char *) result);
        } else {
            sv_setsv((SV*)ST(argvi++), &PL_sv_undef);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_Blast) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        std::string *arg3 = 0 ;
        unsigned long arg4 ;
        double arg5 ;
        bool arg6 ;
        bool arg7 ;
        unsigned long arg8 ;
        unsigned long arg9 ;
        MBlastHits *result;
        std::string temp2 ;
        std::string temp3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 9) || (items > 9)) {
            SWIG_croak("Usage: MDatabank_Blast(self,inQuery,inMatrix,inWordSize,inExpect,inFilter,inGapped,inGapOpen,inGapExtend);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_Blast. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_Blast.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(2), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 3 of MDatabank_Blast.");
            } else {
                temp3.assign(ptr, len);
                arg3 = &temp3;
            }
        }
        arg4 = (unsigned long) SvUV(ST(3));
        arg5 = (double) SvNV(ST(4));
        
        arg6 = (bool) SvIV(ST(5));
        arg7 = (bool) SvIV(ST(6));
        arg8 = (unsigned long) SvUV(ST(7));
        arg9 = (unsigned long) SvUV(ST(8));
        {
            try {
                result = (MBlastHits *)(arg1)->Blast((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MBlastHits, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_Index) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        MIndex *result;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MDatabank_Index(self,inIndex);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_Index. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_Index.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                result = (MIndex *)(arg1)->Index((std::string const &)*arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MIndex, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_Indices) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        MIndices *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MDatabank_Indices(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_Indices. Expected _p_MDatabank");
            }
        }
        {
            try {
                result = (MIndices *)(arg1)->Indices();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MIndices, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_SuggestCorrection) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        MStringIterator *result;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MDatabank_SuggestCorrection(self,inWord);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_SuggestCorrection. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_SuggestCorrection.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                result = (MStringIterator *)(arg1)->SuggestCorrection((std::string const &)*arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MStringIterator, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_Store) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MDatabank_Store(self,inDocument);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_Store. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_Store.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                (arg1)->Store((std::string const &)*arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_IndexText) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        std::string *arg3 = 0 ;
        std::string temp2 ;
        std::string temp3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: MDatabank_IndexText(self,inIndex,inText);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_IndexText. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_IndexText.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(2), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 3 of MDatabank_IndexText.");
            } else {
                temp3.assign(ptr, len);
                arg3 = &temp3;
            }
        }
        {
            try {
                (arg1)->IndexText((std::string const &)*arg2,(std::string const &)*arg3);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_IndexTextAndNumbers) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        std::string *arg3 = 0 ;
        std::string temp2 ;
        std::string temp3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: MDatabank_IndexTextAndNumbers(self,inIndex,inText);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_IndexTextAndNumbers. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_IndexTextAndNumbers.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(2), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 3 of MDatabank_IndexTextAndNumbers.");
            } else {
                temp3.assign(ptr, len);
                arg3 = &temp3;
            }
        }
        {
            try {
                (arg1)->IndexTextAndNumbers((std::string const &)*arg2,(std::string const &)*arg3);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_IndexWord) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        std::string *arg3 = 0 ;
        std::string temp2 ;
        std::string temp3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: MDatabank_IndexWord(self,inIndex,inText);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_IndexWord. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_IndexWord.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(2), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 3 of MDatabank_IndexWord.");
            } else {
                temp3.assign(ptr, len);
                arg3 = &temp3;
            }
        }
        {
            try {
                (arg1)->IndexWord((std::string const &)*arg2,(std::string const &)*arg3);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_IndexValue) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        std::string *arg3 = 0 ;
        std::string temp2 ;
        std::string temp3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: MDatabank_IndexValue(self,inIndex,inText);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_IndexValue. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_IndexValue.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(2), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 3 of MDatabank_IndexValue.");
            } else {
                temp3.assign(ptr, len);
                arg3 = &temp3;
            }
        }
        {
            try {
                (arg1)->IndexValue((std::string const &)*arg2,(std::string const &)*arg3);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_IndexDate) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        std::string *arg3 = 0 ;
        std::string temp2 ;
        std::string temp3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: MDatabank_IndexDate(self,inIndex,inText);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_IndexDate. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_IndexDate.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(2), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 3 of MDatabank_IndexDate.");
            } else {
                temp3.assign(ptr, len);
                arg3 = &temp3;
            }
        }
        {
            try {
                (arg1)->IndexDate((std::string const &)*arg2,(std::string const &)*arg3);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_IndexNumber) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        std::string *arg3 = 0 ;
        std::string temp2 ;
        std::string temp3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: MDatabank_IndexNumber(self,inIndex,inText);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_IndexNumber. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_IndexNumber.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(2), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 3 of MDatabank_IndexNumber.");
            } else {
                temp3.assign(ptr, len);
                arg3 = &temp3;
            }
        }
        {
            try {
                (arg1)->IndexNumber((std::string const &)*arg2,(std::string const &)*arg3);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_AddSequence) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MDatabank_AddSequence(self,inSequence);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_AddSequence. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_AddSequence.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                (arg1)->AddSequence((std::string const &)*arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_FlushDocument) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MDatabank_FlushDocument(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_FlushDocument. Expected _p_MDatabank");
            }
        }
        {
            try {
                (arg1)->FlushDocument();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_SetVersion) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string *arg2 = 0 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MDatabank_SetVersion(self,inVersion);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_SetVersion. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_SetVersion.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                (arg1)->SetVersion((std::string const &)*arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_Finish) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MDatabank_Finish(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_Finish. Expected _p_MDatabank");
            }
        }
        {
            try {
                (arg1)->Finish();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MDatabank_CreateDictionary) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        std::string arg2 ;
        long arg3 ;
        long arg4 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: MDatabank_CreateDictionary(self,inIndices,inMinOccurrence,inMinWordLength);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of MDatabank_CreateDictionary. Expected _p_MDatabank");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MDatabank_CreateDictionary.");
            } else {
                (&arg2)->assign(ptr, len);
            }
        }
        arg3 = (long) SvIV(ST(2));
        arg4 = (long) SvIV(ST(3));
        {
            try {
                (arg1)->CreateDictionary(arg2,arg3,arg4);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_MDatabank) {
    {
        MDatabank *arg1 = (MDatabank *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_MDatabank(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MDatabank,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_MDatabank. Expected _p_MDatabank");
            }
        }
        {
            try {
                delete arg1;
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MQueryResults_Next) {
    {
        MQueryResults *arg1 = (MQueryResults *) 0 ;
        char *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MQueryResults_Next(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MQueryResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of MQueryResults_Next. Expected _p_MQueryResults");
            }
        }
        {
            try {
                result = (char *)(arg1)->Next();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        if (result) {
            sv_setpv((SV*)ST(argvi++), (char *) result);
        } else {
            sv_setsv((SV*)ST(argvi++), &PL_sv_undef);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MQueryResults_Skip) {
    {
        MQueryResults *arg1 = (MQueryResults *) 0 ;
        long arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MQueryResults_Skip(self,inCount);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MQueryResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of MQueryResults_Skip. Expected _p_MQueryResults");
            }
        }
        arg2 = (long) SvIV(ST(1));
        {
            try {
                (arg1)->Skip(arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MQueryResults_Count) {
    {
        MQueryResults *arg1 = (MQueryResults *) 0 ;
        bool arg2 ;
        unsigned long result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MQueryResults_Count(self,inExact);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MQueryResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of MQueryResults_Count. Expected _p_MQueryResults");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                result = (unsigned long)((MQueryResults const *)arg1)->Count(arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MQueryResults_Blast) {
    {
        MQueryResults *arg1 = (MQueryResults *) 0 ;
        std::string *arg2 = 0 ;
        std::string *arg3 = 0 ;
        unsigned long arg4 ;
        double arg5 ;
        bool arg6 ;
        bool arg7 ;
        unsigned long arg8 ;
        unsigned long arg9 ;
        MBlastHits *result;
        std::string temp2 ;
        std::string temp3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 9) || (items > 9)) {
            SWIG_croak("Usage: MQueryResults_Blast(self,inQuery,inMatrix,inWordSize,inExpect,inFilter,inGapped,inGapOpen,inGapExtend);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MQueryResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of MQueryResults_Blast. Expected _p_MQueryResults");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MQueryResults_Blast.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(2), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 3 of MQueryResults_Blast.");
            } else {
                temp3.assign(ptr, len);
                arg3 = &temp3;
            }
        }
        arg4 = (unsigned long) SvUV(ST(3));
        arg5 = (double) SvNV(ST(4));
        
        arg6 = (bool) SvIV(ST(5));
        arg7 = (bool) SvIV(ST(6));
        arg8 = (unsigned long) SvUV(ST(7));
        arg9 = (unsigned long) SvUV(ST(8));
        {
            try {
                result = (MBlastHits *)(arg1)->Blast((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MBlastHits, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_MQueryResults) {
    {
        MQueryResults *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_MQueryResults();");
        }
        {
            try {
                result = (MQueryResults *)new MQueryResults();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MQueryResults, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_MQueryResults) {
    {
        MQueryResults *arg1 = (MQueryResults *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_MQueryResults(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MQueryResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_MQueryResults. Expected _p_MQueryResults");
            }
        }
        {
            try {
                delete arg1;
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MKeys_Next) {
    {
        MKeys *arg1 = (MKeys *) 0 ;
        char *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MKeys_Next(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MKeys,0) < 0) {
                SWIG_croak("Type error in argument 1 of MKeys_Next. Expected _p_MKeys");
            }
        }
        {
            try {
                result = (char *)(arg1)->Next();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        if (result) {
            sv_setpv((SV*)ST(argvi++), (char *) result);
        } else {
            sv_setsv((SV*)ST(argvi++), &PL_sv_undef);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MKeys_Skip) {
    {
        MKeys *arg1 = (MKeys *) 0 ;
        long arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MKeys_Skip(self,inCount);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MKeys,0) < 0) {
                SWIG_croak("Type error in argument 1 of MKeys_Skip. Expected _p_MKeys");
            }
        }
        arg2 = (long) SvIV(ST(1));
        {
            try {
                (arg1)->Skip(arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_MKeys) {
    {
        MKeys *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_MKeys();");
        }
        {
            try {
                result = (MKeys *)new MKeys();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MKeys, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_MKeys) {
    {
        MKeys *arg1 = (MKeys *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_MKeys(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MKeys,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_MKeys. Expected _p_MKeys");
            }
        }
        {
            try {
                delete arg1;
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MIndex_Code) {
    {
        MIndex *arg1 = (MIndex *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MIndex_Code(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MIndex,0) < 0) {
                SWIG_croak("Type error in argument 1 of MIndex_Code. Expected _p_MIndex");
            }
        }
        {
            try {
                result = ((MIndex const *)arg1)->Code();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MIndex_Type) {
    {
        MIndex *arg1 = (MIndex *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MIndex_Type(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MIndex,0) < 0) {
                SWIG_croak("Type error in argument 1 of MIndex_Type. Expected _p_MIndex");
            }
        }
        {
            try {
                result = ((MIndex const *)arg1)->Type();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MIndex_Count) {
    {
        MIndex *arg1 = (MIndex *) 0 ;
        long result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MIndex_Count(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MIndex,0) < 0) {
                SWIG_croak("Type error in argument 1 of MIndex_Count. Expected _p_MIndex");
            }
        }
        {
            try {
                result = (long)((MIndex const *)arg1)->Count();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MIndex_Keys) {
    {
        MIndex *arg1 = (MIndex *) 0 ;
        MKeys *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MIndex_Keys(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MIndex,0) < 0) {
                SWIG_croak("Type error in argument 1 of MIndex_Keys. Expected _p_MIndex");
            }
        }
        {
            try {
                result = (MKeys *)(arg1)->Keys();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MKeys, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MIndex_FindKey) {
    {
        MIndex *arg1 = (MIndex *) 0 ;
        std::string *arg2 = 0 ;
        MKeys *result;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MIndex_FindKey(self,inKey);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MIndex,0) < 0) {
                SWIG_croak("Type error in argument 1 of MIndex_FindKey. Expected _p_MIndex");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of MIndex_FindKey.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                result = (MKeys *)(arg1)->FindKey((std::string const &)*arg2);
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MKeys, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_MIndex) {
    {
        MIndex *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_MIndex();");
        }
        {
            try {
                result = (MIndex *)new MIndex();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MIndex, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_MIndex) {
    {
        MIndex *arg1 = (MIndex *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_MIndex(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MIndex,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_MIndex. Expected _p_MIndex");
            }
        }
        {
            try {
                delete arg1;
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MIndices_Next) {
    {
        MIndices *arg1 = (MIndices *) 0 ;
        MIndex *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MIndices_Next(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MIndices,0) < 0) {
                SWIG_croak("Type error in argument 1 of MIndices_Next. Expected _p_MIndices");
            }
        }
        {
            try {
                result = (MIndex *)(arg1)->Next();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MIndex, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_MIndices) {
    {
        MIndices *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_MIndices();");
        }
        {
            try {
                result = (MIndices *)new MIndices();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MIndices, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_MIndices) {
    {
        MIndices *arg1 = (MIndices *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_MIndices(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MIndices,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_MIndices. Expected _p_MIndices");
            }
        }
        {
            try {
                delete arg1;
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBlastHit_Id) {
    {
        MBlastHit *arg1 = (MBlastHit *) 0 ;
        char *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBlastHit_Id(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHit,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBlastHit_Id. Expected _p_MBlastHit");
            }
        }
        {
            try {
                result = (char *)(arg1)->Id();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        if (result) {
            sv_setpv((SV*)ST(argvi++), (char *) result);
        } else {
            sv_setsv((SV*)ST(argvi++), &PL_sv_undef);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBlastHit_Hsps) {
    {
        MBlastHit *arg1 = (MBlastHit *) 0 ;
        MBlastHsps *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBlastHit_Hsps(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHit,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBlastHit_Hsps. Expected _p_MBlastHit");
            }
        }
        {
            try {
                result = (MBlastHsps *)(arg1)->Hsps();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MBlastHsps, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_MBlastHit) {
    {
        MBlastHit *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_MBlastHit();");
        }
        {
            try {
                result = (MBlastHit *)new MBlastHit();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MBlastHit, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_MBlastHit) {
    {
        MBlastHit *arg1 = (MBlastHit *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_MBlastHit(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHit,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_MBlastHit. Expected _p_MBlastHit");
            }
        }
        {
            try {
                delete arg1;
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBlastHits_ReportInXML) {
    {
        MBlastHits *arg1 = (MBlastHits *) 0 ;
        char *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBlastHits_ReportInXML(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHits,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBlastHits_ReportInXML. Expected _p_MBlastHits");
            }
        }
        {
            try {
                result = (char *)(arg1)->ReportInXML();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        if (result) {
            sv_setpv((SV*)ST(argvi++), (char *) result);
        } else {
            sv_setsv((SV*)ST(argvi++), &PL_sv_undef);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBlastHits_Next) {
    {
        MBlastHits *arg1 = (MBlastHits *) 0 ;
        MBlastHit *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBlastHits_Next(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHits,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBlastHits_Next. Expected _p_MBlastHits");
            }
        }
        {
            try {
                result = (MBlastHit *)(arg1)->Next();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MBlastHit, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_MBlastHits) {
    {
        MBlastHits *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_MBlastHits();");
        }
        {
            try {
                result = (MBlastHits *)new MBlastHits();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MBlastHits, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_MBlastHits) {
    {
        MBlastHits *arg1 = (MBlastHits *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_MBlastHits(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHits,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_MBlastHits. Expected _p_MBlastHits");
            }
        }
        {
            try {
                delete arg1;
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBlastHsp_Score) {
    {
        MBlastHsp *arg1 = (MBlastHsp *) 0 ;
        unsigned long result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBlastHsp_Score(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHsp,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBlastHsp_Score. Expected _p_MBlastHsp");
            }
        }
        {
            try {
                result = (unsigned long)(arg1)->Score();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBlastHsp_BitScore) {
    {
        MBlastHsp *arg1 = (MBlastHsp *) 0 ;
        double result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBlastHsp_BitScore(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHsp,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBlastHsp_BitScore. Expected _p_MBlastHsp");
            }
        }
        {
            try {
                result = (double)(arg1)->BitScore();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBlastHsp_Expect) {
    {
        MBlastHsp *arg1 = (MBlastHsp *) 0 ;
        double result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBlastHsp_Expect(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHsp,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBlastHsp_Expect. Expected _p_MBlastHsp");
            }
        }
        {
            try {
                result = (double)(arg1)->Expect();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBlastHsp_QueryStart) {
    {
        MBlastHsp *arg1 = (MBlastHsp *) 0 ;
        unsigned long result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBlastHsp_QueryStart(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHsp,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBlastHsp_QueryStart. Expected _p_MBlastHsp");
            }
        }
        {
            try {
                result = (unsigned long)(arg1)->QueryStart();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBlastHsp_SubjectStart) {
    {
        MBlastHsp *arg1 = (MBlastHsp *) 0 ;
        unsigned long result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBlastHsp_SubjectStart(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHsp,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBlastHsp_SubjectStart. Expected _p_MBlastHsp");
            }
        }
        {
            try {
                result = (unsigned long)(arg1)->SubjectStart();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBlastHsp_QueryAlignment) {
    {
        MBlastHsp *arg1 = (MBlastHsp *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBlastHsp_QueryAlignment(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHsp,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBlastHsp_QueryAlignment. Expected _p_MBlastHsp");
            }
        }
        {
            try {
                result = (arg1)->QueryAlignment();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBlastHsp_SubjectAlignment) {
    {
        MBlastHsp *arg1 = (MBlastHsp *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBlastHsp_SubjectAlignment(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHsp,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBlastHsp_SubjectAlignment. Expected _p_MBlastHsp");
            }
        }
        {
            try {
                result = (arg1)->SubjectAlignment();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_MBlastHsp) {
    {
        MBlastHsp *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_MBlastHsp();");
        }
        {
            try {
                result = (MBlastHsp *)new MBlastHsp();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MBlastHsp, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_MBlastHsp) {
    {
        MBlastHsp *arg1 = (MBlastHsp *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_MBlastHsp(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHsp,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_MBlastHsp. Expected _p_MBlastHsp");
            }
        }
        {
            try {
                delete arg1;
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MBlastHsps_Next) {
    {
        MBlastHsps *arg1 = (MBlastHsps *) 0 ;
        MBlastHsp *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MBlastHsps_Next(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHsps,0) < 0) {
                SWIG_croak("Type error in argument 1 of MBlastHsps_Next. Expected _p_MBlastHsps");
            }
        }
        {
            try {
                result = (MBlastHsp *)(arg1)->Next();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MBlastHsp, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_MBlastHsps) {
    {
        MBlastHsps *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_MBlastHsps();");
        }
        {
            try {
                result = (MBlastHsps *)new MBlastHsps();
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_MBlastHsps, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_MBlastHsps) {
    {
        MBlastHsps *arg1 = (MBlastHsps *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_MBlastHsps(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_MBlastHsps,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_MBlastHsps. Expected _p_MBlastHsps");
            }
        }
        {
            try {
                delete arg1;
                
            }
            
            catch (const std::exception& e) {
                gErrStr = e.what();
                SWIG_croak(e.what());
            }
            catch (...) {
                gErrStr = "Unknown exception";
                SWIG_croak("unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_MDatabank[] = {{"MRS::MDatabank", 0, "MDatabank *", 0, 0, 0, 0},{"MRS::MDatabank", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_MDatabankArray[] = {{"_p_MDatabankArray", 0, "std::vector<MDatabank * > *|MDatabankArray *", 0, 0, 0, 0},{"_p_MDatabankArray", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_MKeys[] = {{"MRS::MKeys", 0, "MKeys *", 0, 0, 0, 0},{"MRS::MKeys", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_MBlastHsp[] = {{"MRS::MBlastHsp", 0, "MBlastHsp *", 0, 0, 0, 0},{"MRS::MBlastHsp", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__vectorTstd__string_t[] = {{"_p_std__vectorTstd__string_t", 0, "std::vector<std::string > *", 0, 0, 0, 0},{"_p_std__vectorTstd__string_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_MBlastHsps[] = {{"MRS::MBlastHsps", 0, "MBlastHsps *", 0, 0, 0, 0},{"MRS::MBlastHsps", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_MStringIterator[] = {{"MRS::MStringIterator", 0, "MStringIterator *", 0, 0, 0, 0},{"MRS::MStringIterator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__string[] = {{"_p_std__string", 0, "std::string *", 0, 0, 0, 0},{"_p_std__string", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_MQueryResults[] = {{"MRS::MQueryResults", 0, "MQueryResults *", 0, 0, 0, 0},{"MRS::MQueryResults", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_MIndices[] = {{"MRS::MIndices", 0, "MIndices *", 0, 0, 0, 0},{"MRS::MIndices", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_MBlastHits[] = {{"MRS::MBlastHits", 0, "MBlastHits *", 0, 0, 0, 0},{"MRS::MBlastHits", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_MIndex[] = {{"MRS::MIndex", 0, "MIndex *", 0, 0, 0, 0},{"MRS::MIndex", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_MBlastHit[] = {{"MRS::MBlastHit", 0, "MBlastHit *", 0, 0, 0, 0},{"MRS::MBlastHit", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_MDatabank, 
_swigt__p_MDatabankArray, 
_swigt__p_MKeys, 
_swigt__p_MBlastHsp, 
_swigt__p_std__vectorTstd__string_t, 
_swigt__p_MBlastHsps, 
_swigt__p_MStringIterator, 
_swigt__p_std__string, 
_swigt__p_MQueryResults, 
_swigt__p_MIndices, 
_swigt__p_MBlastHits, 
_swigt__p_MIndex, 
_swigt__p_MBlastHit, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_constant_info swig_constants[] = {
{0,0,0,0,0,0}
};
#ifdef __cplusplus
}
#endif
static swig_variable_info swig_variables[] = {
    { "MRSc::gErrStr", MAGIC_CLASS _wrap_set_gErrStr, MAGIC_CLASS _wrap_val_gErrStr,&SWIGTYPE_p_std__string },
    { "MRSc::VERBOSE", MAGIC_CLASS _wrap_set_VERBOSE, MAGIC_CLASS _wrap_val_VERBOSE,0 },
    { "MRSc::THREADS", MAGIC_CLASS _wrap_set_THREADS, MAGIC_CLASS _wrap_val_THREADS,0 },
    { "MRSc::COMPRESSION", MAGIC_CLASS _wrap_set_COMPRESSION, MAGIC_CLASS _wrap_val_COMPRESSION,0 },
    { "MRSc::COMPRESSION_LEVEL", MAGIC_CLASS _wrap_set_COMPRESSION_LEVEL, MAGIC_CLASS _wrap_val_COMPRESSION_LEVEL,0 },
    { "MRSc::COMPRESSION_DICTIONARY", MAGIC_CLASS _wrap_set_COMPRESSION_DICTIONARY, MAGIC_CLASS _wrap_val_COMPRESSION_DICTIONARY,0 },
{0,0,0,0}
};
static swig_command_info swig_commands[] = {
{"MRSc::errstr", _wrap_errstr},
{"MRSc::DUST", _wrap_DUST},
{"MRSc::SEG", _wrap_SEG},
{"MRSc::new_MStringIterator", _wrap_new_MStringIterator},
{"MRSc::MStringIterator_Next", _wrap_MStringIterator_Next},
{"MRSc::delete_MStringIterator", _wrap_delete_MStringIterator},
{"MRSc::new_MDatabank", _wrap_new_MDatabank},
{"MRSc::MDatabank_Create", _wrap_MDatabank_Create},
{"MRSc::MDatabank_Merge", _wrap_MDatabank_Merge},
{"MRSc::MDatabank_Count", _wrap_MDatabank_Count},
{"MRSc::MDatabank_GetVersion", _wrap_MDatabank_GetVersion},
{"MRSc::MDatabank_DumpInfo", _wrap_MDatabank_DumpInfo},
{"MRSc::MDatabank_CountForKey", _wrap_MDatabank_CountForKey},
{"MRSc::MDatabank_Find", _wrap_MDatabank_Find},
{"MRSc::MDatabank_Get", _wrap_MDatabank_Get},
{"MRSc::MDatabank_Sequence", _wrap_MDatabank_Sequence},
{"MRSc::MDatabank_Blast", _wrap_MDatabank_Blast},
{"MRSc::MDatabank_Index", _wrap_MDatabank_Index},
{"MRSc::MDatabank_Indices", _wrap_MDatabank_Indices},
{"MRSc::MDatabank_SuggestCorrection", _wrap_MDatabank_SuggestCorrection},
{"MRSc::MDatabank_Store", _wrap_MDatabank_Store},
{"MRSc::MDatabank_IndexText", _wrap_MDatabank_IndexText},
{"MRSc::MDatabank_IndexTextAndNumbers", _wrap_MDatabank_IndexTextAndNumbers},
{"MRSc::MDatabank_IndexWord", _wrap_MDatabank_IndexWord},
{"MRSc::MDatabank_IndexValue", _wrap_MDatabank_IndexValue},
{"MRSc::MDatabank_IndexDate", _wrap_MDatabank_IndexDate},
{"MRSc::MDatabank_IndexNumber", _wrap_MDatabank_IndexNumber},
{"MRSc::MDatabank_AddSequence", _wrap_MDatabank_AddSequence},
{"MRSc::MDatabank_FlushDocument", _wrap_MDatabank_FlushDocument},
{"MRSc::MDatabank_SetVersion", _wrap_MDatabank_SetVersion},
{"MRSc::MDatabank_Finish", _wrap_MDatabank_Finish},
{"MRSc::MDatabank_CreateDictionary", _wrap_MDatabank_CreateDictionary},
{"MRSc::delete_MDatabank", _wrap_delete_MDatabank},
{"MRSc::MQueryResults_Next", _wrap_MQueryResults_Next},
{"MRSc::MQueryResults_Skip", _wrap_MQueryResults_Skip},
{"MRSc::MQueryResults_Count", _wrap_MQueryResults_Count},
{"MRSc::MQueryResults_Blast", _wrap_MQueryResults_Blast},
{"MRSc::new_MQueryResults", _wrap_new_MQueryResults},
{"MRSc::delete_MQueryResults", _wrap_delete_MQueryResults},
{"MRSc::MKeys_Next", _wrap_MKeys_Next},
{"MRSc::MKeys_Skip", _wrap_MKeys_Skip},
{"MRSc::new_MKeys", _wrap_new_MKeys},
{"MRSc::delete_MKeys", _wrap_delete_MKeys},
{"MRSc::MIndex_Code", _wrap_MIndex_Code},
{"MRSc::MIndex_Type", _wrap_MIndex_Type},
{"MRSc::MIndex_Count", _wrap_MIndex_Count},
{"MRSc::MIndex_Keys", _wrap_MIndex_Keys},
{"MRSc::MIndex_FindKey", _wrap_MIndex_FindKey},
{"MRSc::new_MIndex", _wrap_new_MIndex},
{"MRSc::delete_MIndex", _wrap_delete_MIndex},
{"MRSc::MIndices_Next", _wrap_MIndices_Next},
{"MRSc::new_MIndices", _wrap_new_MIndices},
{"MRSc::delete_MIndices", _wrap_delete_MIndices},
{"MRSc::MBlastHit_Id", _wrap_MBlastHit_Id},
{"MRSc::MBlastHit_Hsps", _wrap_MBlastHit_Hsps},
{"MRSc::new_MBlastHit", _wrap_new_MBlastHit},
{"MRSc::delete_MBlastHit", _wrap_delete_MBlastHit},
{"MRSc::MBlastHits_ReportInXML", _wrap_MBlastHits_ReportInXML},
{"MRSc::MBlastHits_Next", _wrap_MBlastHits_Next},
{"MRSc::new_MBlastHits", _wrap_new_MBlastHits},
{"MRSc::delete_MBlastHits", _wrap_delete_MBlastHits},
{"MRSc::MBlastHsp_Score", _wrap_MBlastHsp_Score},
{"MRSc::MBlastHsp_BitScore", _wrap_MBlastHsp_BitScore},
{"MRSc::MBlastHsp_Expect", _wrap_MBlastHsp_Expect},
{"MRSc::MBlastHsp_QueryStart", _wrap_MBlastHsp_QueryStart},
{"MRSc::MBlastHsp_SubjectStart", _wrap_MBlastHsp_SubjectStart},
{"MRSc::MBlastHsp_QueryAlignment", _wrap_MBlastHsp_QueryAlignment},
{"MRSc::MBlastHsp_SubjectAlignment", _wrap_MBlastHsp_SubjectAlignment},
{"MRSc::new_MBlastHsp", _wrap_new_MBlastHsp},
{"MRSc::delete_MBlastHsp", _wrap_delete_MBlastHsp},
{"MRSc::MBlastHsps_Next", _wrap_MBlastHsps_Next},
{"MRSc::new_MBlastHsps", _wrap_new_MBlastHsps},
{"MRSc::delete_MBlastHsps", _wrap_delete_MBlastHsps},
{0,0}
};

#ifdef __cplusplus
extern "C"
#endif

XS(SWIG_init) {
    dXSARGS;
    int i;
    static int _init = 0;
    if (!_init) {
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }	
        _init = 1;
    }
    
    /* Install commands */
    for (i = 0; swig_commands[i].name; i++) {
        newXS((char*) swig_commands[i].name,swig_commands[i].wrapper, (char*)__FILE__);
    }
    
    /* Install variables */
    for (i = 0; swig_variables[i].name; i++) {
        SV *sv;
        sv = perl_get_sv((char*) swig_variables[i].name, TRUE | 0x2);
        if (swig_variables[i].type) {
            SWIG_MakePtr(sv,(void *)1, *swig_variables[i].type,0);
        } else {
            sv_setiv(sv,(IV) 0);
        }
        swig_create_magic(sv, (char *) swig_variables[i].name, swig_variables[i].set, swig_variables[i].get); 
    }
    
    /* Install constant */
    for (i = 0; swig_constants[i].type; i++) {
        SV *sv;
        sv = perl_get_sv((char*)swig_constants[i].name, TRUE | 0x2);
        switch(swig_constants[i].type) {
            case SWIG_INT:
            sv_setiv(sv, (IV) swig_constants[i].lvalue);
            break;
            case SWIG_FLOAT:
            sv_setnv(sv, (double) swig_constants[i].dvalue);
            break;
            case SWIG_STRING:
            sv_setpv(sv, (char *) swig_constants[i].pvalue);
            break;
            case SWIG_POINTER:
            SWIG_MakePtr(sv, swig_constants[i].pvalue, *(swig_constants[i].ptype),0);
            break;
            case SWIG_BINARY:
            SWIG_MakePackedObj(sv, swig_constants[i].pvalue, swig_constants[i].lvalue, *(swig_constants[i].ptype));
            break;
            default:
            break;
        }
        SvREADONLY_on(sv);
    }
    
    SWIG_TypeClientData(SWIGTYPE_p_MStringIterator, (void*) "MRS::MStringIterator");
    SWIG_TypeClientData(SWIGTYPE_p_MDatabank, (void*) "MRS::MDatabank");
    SWIG_TypeClientData(SWIGTYPE_p_MQueryResults, (void*) "MRS::MQueryResults");
    SWIG_TypeClientData(SWIGTYPE_p_MKeys, (void*) "MRS::MKeys");
    SWIG_TypeClientData(SWIGTYPE_p_MIndex, (void*) "MRS::MIndex");
    SWIG_TypeClientData(SWIGTYPE_p_MIndices, (void*) "MRS::MIndices");
    SWIG_TypeClientData(SWIGTYPE_p_MBlastHit, (void*) "MRS::MBlastHit");
    SWIG_TypeClientData(SWIGTYPE_p_MBlastHits, (void*) "MRS::MBlastHits");
    SWIG_TypeClientData(SWIGTYPE_p_MBlastHsp, (void*) "MRS::MBlastHsp");
    SWIG_TypeClientData(SWIGTYPE_p_MBlastHsps, (void*) "MRS::MBlastHsps");
    ST(0) = &PL_sv_yes;
    XSRETURN(1);
}

